n = 4
datatype ThreadID = T.{0..n-1}
datatype SignalID = S.{0}--..n-1}
datatype MonitorID = SigM.SignalID
datatype ConditionID = C.{0}


-- This will include the version of the SCL monitor based on a 
-- ParkSupport implementation
include "scl-monitor_simplified-queue-v2.csp"

instance SCL = SCLMonitor


-- A very general correct usage of either an SCL or JVM monitor
-- Threads here aren't allowed to terminate; this could be modified to
-- include that but I don't feel like theres much to gain from it

-- TODO: parametise over ConditionID correctly
ThreadSCL(t) = SCL::Lock(SigM.S.0, t); ThreadSCL1(t)
ThreadSCL1(t) =   
  [] c : ConditionID @ 
     (
         (SCL::Await(SigM.S.0, c, t); ThreadSCL1(t))      
      [] (SCL::Signal(SigM.S.0, c, t); ThreadSCL1(t))
      [] (SCL::Signal(SigM.S.0, c, t); ThreadSCL1(t))
      [] (SCL::SignalAll(SigM.S.0, c, t); ThreadSCL1(t))
     )
  
  [] (SCL::Unlock(SigM.S.0, t); ThreadSCL(t))

 


-- Initialise systems of multiples of the threads above operating on 
-- the same monitor in parallel. Note that here we block spurious wakeups

ThreadsSCL = ||| t<-ThreadID @ ThreadSCL(t)

-- The Det system blocks spurious wakeups, the other one allows them
SCLSystem = SCL::runWith(ThreadsSCL, SigM.S.0, ConditionID)
SCLSystemDet = SCL::runWithDet(ThreadsSCL, SigM.S.0, ConditionID)


-- The specification process for a monitor with multiple conditions

initSeq = mapFromList(<(c, <>) | c <- seq(ConditionID)>)
-- values(map) = Union({set(mapLookup(map, cnd)) | cnd <- ConditionID})

-- SpecUnlocked(m, waiting, poss) =
--      SCL::callAcquire.m?t':diff(ThreadID, union(values(waiting), poss)) ->
--        SpecUnlocked(m, waiting, union(poss,{t'}))
--   [] SCL::acquire.m?t:poss -> SpecLocked(m, t, waiting, diff(poss,{t}))
     

-- SpecLocked(m, t, waiting, poss) =
--      SCL::callAwait.m?c:ConditionID!t -> 
--        SpecLockedWaiting(m, c, t, waiting, poss)
--   [] SCL::callSignal.m?c:ConditionID!t -> 
--        (if mapLookup(waiting, c) == <> then 
--            SpecLocked(m, t, waiting, poss) 
--         else SpecLocked(m, t, 
--                          mapUpdate(waiting, c, tail(mapLookup(waiting, c))), 
--                          union(poss, {head(mapLookup(waiting, c))})))
--   [] SCL::callSignalAll.m?c:ConditionID!t -> 
--        (if mapLookup(waiting, c) == <> then 
--            SpecLocked(m, t, waiting, poss) 
--         else SpecLocked(m, t, mapUpdate(waiting, c, <>), 
--                          union(poss, set(mapLookup(waiting, c)))))
--   [] SCL::callRelease.m.t -> SpecLockedReleasing(m, t, waiting, poss)
--   [] SCL::callAcquire.m?t':diff(ThreadID, 
--                                 Union({values(waiting), poss, {t}})) -> 
--        SpecLocked(m, t, waiting, union(poss, {t'}))

-- -- t doing a wait; needs to release the lock
-- SpecLockedWaiting(m, c, t, waiting, poss) =
--      SCL::release.m.t -> 
--        SpecUnlocked(m, mapUpdate(waiting, c, (mapLookup(waiting, c)^<t>)), poss)
--   [] SCL::callAcquire.m?t':diff(ThreadID, 
--                                 Union({values(waiting), poss, {t}})) ->
--        SpecLockedWaiting(m, c, t, waiting, union(poss, {t'}))

-- -- t releasing the lock
-- SpecLockedReleasing(m, t, waiting, poss) =
--      SCL::release.m.t -> SpecUnlocked(m, waiting, poss)
--   [] SCL::callAcquire.m?t':diff(ThreadID, 
--                                 Union({values(waiting), poss, {t}})) ->
--        SpecLockedReleasing(m, t, waiting, union(poss, {t'}))

-- SpecSCL = SpecUnlocked(SigM.S.0, initSeq, {})  

initSet = mapFromList(<(c, {}) | c <- seq(ConditionID)>)
values(map) = Union({mapLookup(map, cnd) | cnd <- ConditionID})
channel callSignalSpec: MonitorID.ConditionID.ThreadID.ThreadID


SpecUnlocked(m, waiting, poss) =
     SCL::callAcquire.m?t':diff(ThreadID, union(values(waiting), poss)) ->
       SpecUnlocked(m, waiting, union(poss,{t'}))
  [] SCL::acquire.m?t:poss -> SpecLocked(m, t, waiting, diff(poss,{t}))
     

SpecLocked(m, t, waiting, poss) =
  [] c': ConditionID @  
      (   
          (mapLookup(waiting, c') == {}) & callSignalSpec.m.c'.t.t ->
             SpecLocked(m, t, waiting, poss)
       [] (mapLookup(waiting, c') != {}) & 
            callSignalSpec.m.c'.t?t':mapLookup(waiting, c') -> 
              SpecLocked(m, t, 
                        mapUpdate(waiting, c', diff(mapLookup(waiting, c'), {t'})), 
                        union(poss, {t'}))
      )
  [] SCL::callSignalAll.m?c:ConditionID!t -> 
       (if mapLookup(waiting, c) == {} then 
            SpecLocked(m, t, waiting, poss) 
        else SpecLocked(m, t, mapUpdate(waiting, c, {}), 
                          union(poss, mapLookup(waiting, c))))
  [] SCL::callRelease.m.t -> 
        SpecLockedReleasing(m, t, waiting, poss)
  [] SCL::callAcquire.m?t':diff(ThreadID, 
                                Union({values(waiting), poss, {t}})) -> 
        SpecLocked(m, t, waiting, union(poss, {t'}))
  [] SCL::callAwait.m?c:ConditionID!t -> 
        SpecLockedWaiting(m, c, t, waiting, poss)
  

-- t doing a wait; needs to release the lock
SpecLockedWaiting(m, c, t, waiting, poss) =
     SCL::release.m.t -> 
       SpecUnlocked(m, mapUpdate(waiting, c, union(mapLookup(waiting, c), {t})), 
                    poss)
  [] SCL::callAcquire.m?t':diff(ThreadID, 
                                Union({values(waiting), poss, {t}})) ->
       SpecLockedWaiting(m, c, t, waiting, union(poss, {t'}))

-- t releasing the lock
SpecLockedReleasing(m, t, waiting, poss) =
     SCL::release.m.t -> SpecUnlocked(m, waiting, poss)
  [] SCL::callAcquire.m?t':diff(ThreadID, 
                                Union({values(waiting), poss, {t}})) ->
       SpecLockedReleasing(m, t, waiting, union(poss, {t'}))






Spec2Unlocked(m, waiting) = 
  SCL::acquire.m?t:diff(ThreadID, values(waiting)) -> Spec2Locked(m, t, waiting)

Spec2Locked(m, t, waiting) =
  [] c': ConditionID @  
      (   
          (mapLookup(waiting, c') == {}) & SCL::callSignal.m.c'.t ->
             Spec2Locked(m, t, waiting)
       [] (mapLookup(waiting, c') != {}) & 
            |~| t': mapLookup(waiting, c') @ SCL::callSignal.m.c'.t -> 
                Spec2Locked(m, t, 
                            mapUpdate(waiting, c', diff(mapLookup(waiting, c'), {t'})))            
      )
  [] SCL::callSignalAll.m?c:ConditionID!t -> 
            Spec2Locked(m, t, mapUpdate(waiting, c, {}))
  [] SCL::callRelease.m.t -> SCL::release.m.t ->
        Spec2Unlocked(m, waiting)
  [] SCL::callAwait.m?c:ConditionID!t -> SCL::release.m.t ->
        Spec2Unlocked(m, mapUpdate(waiting, c, union(mapLookup(waiting, c), {t})))


SpecSCL = (let m = SigM.S.0 within 
            (SpecUnlocked(m, initSet, {}) 
              [[callSignalSpec.m.c.t.t' <- SCL::callSignal.m.c.t 
                  | c <- ConditionID, t <- ThreadID, t' <- ThreadID]]))

Spec2Thread(t, m) = SCL::callAcquire.m.t -> SCL::acquire.m.t -> Spec2Thread2(t, m)
Spec2Thread2(t, m) = 
     SCL::callAwait.m?c.t -> SCL::release.m.t -> SCL::acquire.m.t -> Spec2Thread2(t, m)
  [] SCL::callRelease.m.t -> SCL::release.m.t -> Spec2Thread(t, m)
  [] SCL::callSignalAll.m?c.t -> Spec2Thread2(t, m)
  [] SCL::callSignal.m?c.t -> Spec2Thread2(t, m)

SpecChans(m, setC) = 
  {|SCL::callSignal.m.c, SCL::callAwait.m.c, SCL::callSignalAll.m.c, SCL::acquire.m, SCL::callRelease.m,
    SCL::release.m | c <- setC|}
  --{|SCL::callSignal.m.c, SCL::callAwait.m.c, SCL::callSignalAll.m.c, SCL::acquire.m, SCL::callRelease.m| c <- setC|}

Spec2SCL = (let m = SigM.S.0 within 
            (Spec2Unlocked(m, initSet) [|SpecChans(m, ConditionID)|]
                (||| t <- ThreadID @ (Spec2Thread(t, m)))))


valuesSeq(map) = Union({set(mapLookup(map, cnd)) | cnd <- ConditionID})
channel error: MonitorID
OrderCheck(m, waiting) = 
     SCL::acquire.m?t:ThreadID -> 
      (if member(t, valuesSeq(waiting)) then error.m -> STOP--DIV
       else OrderCheck(m, waiting))
  [] SCL::callAwait.m?c?t -> 
      (if member(t, valuesSeq(waiting)) then error.m -> STOP
       else OrderCheck(m, mapUpdate(waiting, c, mapLookup(waiting, c)^<t>)))
  [] SCL::callSignalAll.m?c?_ -> 
       OrderCheck(m, mapUpdate(waiting, c, <>))
  [] SCL::callSignal.m?c?_ -> 
      (if null(mapLookup(waiting, c)) then OrderCheck(m, waiting)
       else OrderCheck(m, mapUpdate(waiting, c, 
                                    tail(mapLookup(waiting, c)))))
          







-- Only assertion that fails is (SpecSCL') [FD= (SCLSystem)
-- this is expected as our specification does not diverge; could 
-- non-deterministically add divergences whenever a thread is waiting

assert not SCLSystem \ {SCL::spurious} :[divergence free]
assert SCLSystem :[divergence free]


assert (SpecSCL) [T= (SCLSystem)
assert SpecSCL [F= (SCLSystem)  --[[SCL::callSignalSpec.m.c.t.t <- SCL::callSignal.m.c.t | m <- MonitorID, c <- ConditionID, t <- ThreadID, t' <- ThreadID]])

assert Spec2SCL  [F= (SCLSystem) \ {SCL::spurious}


assert SpecSCL [F= (OrderCheck(SigM.S.0, initSeq) 
                     [|{|SCL::callAwait.SigM.S.0,
                         SCL::acquire.SigM.S.0,
                         SCL::callSignal.SigM.S.0,
                         SCL::callSignalAll.SigM.S.0|}|] SCLSystem)

assert Spec2SCL [T= SCLSystem \ {SCL::spurious}
assert Spec2SCL [F= SCLSystem \ {SCL::spurious}
--assert Spec2SCL ||| CHAOS({SCL::spurious}) [FD= SCLSystem


-- Thread''(t) = SCL::callAcquire.monC.t -> SCL::acquire.monC.t -> Thread1''(t)
-- Thread1''(monC, t) = 
--      SCL::callRelease.monC.t -> SCL::release.monC.t -> Thread''(t)
--   [] SCL::callAwait.monC.t -> SCL::release.monC.t -> SCL::acquire.monC.t -> Thread1''(t)
--   [] SCL::callSignal.monC.t -> Thread1''(t)
--   [] SCL::callSignalAll.monC.t -> Thread1''(t)
 
-- SpecUnlocked''(waiting) =
--   SCL::acquire.monC?t:diff(ThreadID, set(waiting)) -> SpecLocked''(t, waiting)   

-- SpecLocked''(t, waiting) =
--   SCL::callAwait.monC.t -> SCL::release.monC.t -> SpecUnlocked''(waiting^<t>)
--   []
--   SCL::callSignal.monC.t -> (if waiting == <> then SpecLocked''(t, waiting) 
--                              else SpecLocked''(t, tail(waiting)))
--   []  
--   SCL::callSignalAll.monC.t -> (if null(waiting) then SpecLocked''(t, waiting) 
--                                else SpecLocked''(t, <>))
--   []
--   SCL::release.monC.t -> SpecUnlocked''(waiting)

-- SpecSCL'' = SpecUnlocked''(<>) [|{|SCL::acquire.monC, SCL::release.monC, SCL::callAwait.monC, SCL::callSignal.monC, SCL::callSignalAll.monC|}|] 
--             (||| t <- ThreadID @ Thread''(t))


-- Both satisfy refinement under traces, stable-failures
-- Failures-divergences fails when spurious wakeups allowed

--TODO: Add regulator?

-- assert SpecSCL [F= SpecSCL'
-- assert SpecSCL' [F= SpecSCL

-- assert SpecSCL' [F= SpecSCL''
-- assert SpecSCL'' [F= SpecSCL'

-- assert SpecSCL'' :[divergence free]
-- assert (SpecSCL'') [T= (SCLSystem) 
-- assert (SpecSCL'') [F= (SCLSystem) 
-- assert (SpecSCL'') [FD= (SCLSystem) 

-- assert (SpecSCL'') [T= (SCLSystemDet) 
-- assert (SpecSCL'') [F= (SCLSystemDet) 
-- assert (SpecSCL'') [FD= (SCLSystemDet) 



-- I think this refinement is sufficient to show correctness of a monitor:
--  - Traces shows that the spec and implementations can perform the 
--    same operations at the same time
--  - Failures show that these have the same rejections and that any 
--    thread can be signalled to wake up/acquire the monitor at any 
--    point whilst not waiting etc.

