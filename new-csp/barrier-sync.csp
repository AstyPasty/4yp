include "signal.csp"

n = 7
datatype ThreadID = T.{0..n-1}
datatype SignalID = S.{0..n-1}

-- The state variables for each of the n signal objects
channel getState, setState : SignalID . ThreadID . Bool
channel gASState : SignalID . ThreadID . Bool . Bool
stateChannels = {|getState, setState, gASState|}
StateArray = ||| s : SignalID @ Var(false, getState.s, setState.s, gASState.s)

-- The wait/notify restrictions for each of the signal objects
channel wait, notify, notified : SignalID . ThreadID
notifyChannels = {|wait, notify, notified|}
WaitNotifyArray = ||| s : SignalID @ WaitNotify(s, {})

-- The synchronisation channels for each of the signal objects
channel syncEnter, syncExit : SignalID . ThreadID
syncChannels = {|syncEnter, syncExit|}
SynchronizeArray = ||| s : SignalID @ Synchronize(s)

-- The channels to represent a call of each fo the methods offered by 
-- the signal object
channel signalUpAndWait, waitForSignalUp, signalDown : SignalID . ThreadID
signalChannels = {|signalUpAndWait, waitForSignalUp, signalDown|}

-- Channels to represent the completion of a barrier sync and a thread 
-- terminating
channel done: ThreadID
channel end: ThreadID

-- The implementation of the sync function
-- This currently uses external choice for thread termination; this is
-- somewhat artificial but means that we can restrict it to show that 
-- the barrier sync only deadlocks when at least one thread has 
-- terminated
-- TODO: Is there a nicer way of writing this than lots of If - Elses?
--       without a lot of repeated code
Thread(T.me) = ThreadIf1(T.me) [] end.T.me -> SKIP
ThreadIf1(T.me) = if (me*2+1 < n) then WaitForSignalUp(S.(me*2+1), T.me); 
                                       ThreadIf2(T.me) 
                  else ThreadIf2(T.me)
ThreadIf2(T.me) = if (me*2+2 < n) then WaitForSignalUp(S.(me*2+2), T.me); 
                                       ThreadIf3(T.me) 
                  else ThreadIf3(T.me)
ThreadIf3(T.me) = if me != 0 then SignalUpAndWait(S.me, T.me); 
                                  ThreadIf4(T.me) 
                  else ThreadIf4(T.me)
ThreadIf4(T.me) = if (me*2+1 < n) then SignalDown(S.(me*2+1), T.me); 
                                       ThreadIf5(T.me) 
                  else ThreadIf5(T.me)
ThreadIf5(T.me) = if (me*2+2 < n) then SignalDown(S.(me*2+2), T.me); 
                                       done.T.me -> Thread(T.me) 
                  else done.T.me -> Thread(T.me)

-- To create the system we synchronise the threads with their 
-- corresponding synchronized block methods, notification methods and 
-- state variables
Threads = ||| t : ThreadID @ Thread(t)
NotifyThreads = Threads [|notifyChannels|] WaitNotifyArray
SyncThreads = NotifyThreads [|syncChannels|] SynchronizeArray
BarrierSystem = SyncThreads [|stateChannels|] StateArray

-- Would only diverge if assertions fail
assert BarrierSystem :[divergence free]
-- Should deadlock when any thread terminates via end
assert not BarrierSystem :[deadlock free]
-- Blocking end makes the barrier sync deadlock free
assert BarrierSystem [|{|end|}|] STOP :[deadlock free]

-- Show that all threads can synchronize
DoneCounter(x) = if x == n then DIV else done?_ -> DoneCounter(x+1)
assert not BarrierSystem [|{|done, end|}|] DoneCounter(0) :[divergence free]

-- Only display the external method calls used by the barrier synchronisation
BarrierSystemExt = (BarrierSystem)
                      \ Union({notifyChannels, stateChannels, syncChannels})

assert BarrierSystemExt :[divergence free]



-- Version of the threads that makes use of the simplified Signal object
sThread(T.me) = sThreadIf1(T.me) [] end.T.me -> SKIP
sThreadIf1(T.me) = if (me*2+1 < n) then sWaitForSignalUp(S.(me*2+1), T.me); 
                                        sThreadIf2(T.me) 
                   else sThreadIf2(T.me)
sThreadIf2(T.me) = if (me*2+2 < n) then sWaitForSignalUp(S.(me*2+2), T.me); 
                                        sThreadIf3(T.me) 
                   else sThreadIf3(T.me)
sThreadIf3(T.me) = if me != 0 then sSignalUpAndWait(S.me, T.me);
                                   sThreadIf4(T.me) 
                   else sThreadIf4(T.me)
sThreadIf4(T.me) = if (me*2+1 < n) then sSignalDown(S.(me*2+1), T.me); 
                                        sThreadIf5(T.me) 
                   else sThreadIf5(T.me)
sThreadIf5(T.me) = if (me*2+2 < n) then sSignalDown(S.(me*2+2), T.me); 
                                        done.T.me -> sThread(T.me) 
                   else done.T.me -> sThread(T.me)

sThreads = ||| t : ThreadID @ sThread(t)

sBarrierSystem = (sThreads [|stateChannels|] StateArray) \ stateChannels

assert sBarrierSystem :[divergence free]
assert not sBarrierSystem  :[deadlock free]
assert sBarrierSystem [|{|end|}|] STOP :[deadlock free]

-- Simplified signal objects are trace refined by the Barrier system
assert sBarrierSystem [T= BarrierSystemExt
-- THe two are trace equivalent (as intended)
--assert BarrierSystemExt [T= sBarrierSystem

-- New div must've been introduced by all threads communicating done
assert not sBarrierSystem [|{|done|}|] DoneCounter(0) :[divergence free]





