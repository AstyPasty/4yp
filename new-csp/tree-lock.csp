-- A lock based on multiple locks arranged into a binary tree stucture

include "variable.csp"
include "lock-spec.csp"

-- We will use *_SPIN to represent types/sets/values to be used in the 
--   implementation of the tree using TTAS locks at each node
-- Likewise *_SPEC is used with the tree lock using the LockSpec
-- As shown in the spin-lock file, the two locks are equivalent under 
-- the traces model, hence it is valid to substitute the LockSpec for 
-- the TTAS lock under traces and significantly more computationally 
-- efficient

NTHREADS_SPIN = 4 
NTHREADS_SPEC = 4
NLOCKS_SPIN = NTHREADS_SPIN - 1
NLOCKS_SPEC = NTHREADS_SPEC - 1

-- Define LockID and ThreadID datatypes to be used by both the Spin 
-- and the Spec implementation, and then the more restricted subtypes 
-- for each version
datatype LockID = L.(union({0..NLOCKS_SPIN-1}, {0..NLOCKS_SPEC-1}))
subtype Lock_SPIN = L.{0..NLOCKS_SPIN-1}
subtype Lock_SPEC = L.{0..NLOCKS_SPEC-1}
datatype ThreadID = T.(union({0..NLOCKS_SPIN-1}, {0..NLOCKS_SPEC-1})).{1..2}
subtype Thread_SPIN = T.{(NLOCKS_SPIN-1)/2..NLOCKS_SPIN-1}.{1..2}
subtype Thread_SPEC = T.{(NLOCKS_SPEC-1)/2..NLOCKS_SPEC-1}.{1..2}

channel delay: ThreadID.LockID
channel getAndSet: LockID.ThreadID.Bool.Bool
channel get: LockID.ThreadID.Bool
channel set: LockID.ThreadID.Bool
InternalChannels = {|get, set, getAndSet, delay|}

-- Array of variables with index Lock_SPIN
LocksSpin = Array(Lock_SPIN, false, get, set, getAndSet) 

-- Logic for which lock for thread t to next try to lock/unlock
-- TODO: Currently fixed for NTHREADS_SPIN == 4
TLockParent(t, L.0) = SKIP
TLockParent(t, L.x) = TThreadL(t, L.((x-1)/2))--TNotHolding(t, L.((x-1)/2))
TUnlockChild(T.x.y, L.z) = if(z == 0) then TThreadU(T.x.y, L.x) else SKIP


-- TLock, TUnlock etc are the same as the implementations in spin-lock,
-- except calling TUnlockChild once a TUnlock is complete and calling 
-- TLockParent once a TLock is complete to enable a thread to traverse 
-- between locks

TLock :: (ThreadID, LockID) -> Proc          -- def lock = do {
TLock(t, l) = get.l.t?c -> if c == True then TLock(t, l)  -- while(state.get()){ }
           else getAndSet.l.t?v!True -> 
             if v == False then TLockParent(t, l)          -- } (while(state.getAndSet(true)))
             else delay.t.l -> TLock(t, l) -- getAndSet returned false so spin and retry

TUnlock :: (ThreadID, LockID) -> Proc
TUnlock(t, l) = set.l.t!False -> TUnlockChild(t, l) -- def unlock = state.set(false)

-- TTryLock :: (ThreadID, LockID) -> Proc
-- TTryLock(t, l) = get.l.t?s ->             -- def tryLock = !state.get
--                if s == True then TNotHolding(t, l) 
--                else getAndSet.l.t?v!True ->  --               && !state.getAndSet(true)
--                  if v == False then THolding(t, l) 
--                  else lockNotObtained.l.t -> TNotHolding(t, l)

--THolding(t, l) = TLockParent(t, l)

-- TODO: Allow TTryLock, similar to spin-lock.csp
--TNotHolding(t, l) = callLock.l.t -> TLock(t, l)--(TTryLock(t, l) |~| TLock(t, l))

TThreadU(t.y.z, l) = TUnlock(t.y.z, l); TThreadL(t.y.z, l.y)
TThreadL(t.y.z, l.x) = callLock.l.t -> TLock(t, l); 
                       if x == 0 then TThreadU(t, l)
                                 else TLockParent(t, l)
                [] (y == x) & (end.t -> SKIP)

-- Build the Tree lock from the TTAS locks
-- Initialise threads to not hold their locks
AllThreads = ||| (T.x.y) : Thread_SPIN @ TThreadL(T.x.y, (L.x))
-- Sychronise the threads with all the locks
TreeSystemSpinInt = (AllThreads [|InternalChannels|] LocksSpin)
-- Rename lock acquisition and releasing to the external lock events
TreeSystemSpinLockEvents = 
  TreeSystemSpinInt [[getAndSet.l.t.False.True <- lockAcquired.l.t, 
                      set.l.t.False <- lockReleased.l.t 
                        | t <- ThreadID, l <- Lock_SPIN]] 
-- Hide internal events (this will diverge)
TreeSystemSpinExtDiv = TreeSystemSpinLockEvents \ InternalChannels
-- Block events that cause divergence and then hide internal events
NoDiv = get?l?t!True -> STOP [] getAndSet?l?t!True!True -> STOP
TreeSystemSpinNoDiv = (TreeSystemSpinLockEvents 
                        [|{get.l.t.True, getAndSet.l.t.True.True 
                            | t<- Thread_SPIN, l <- LockID}|] NoDiv) 
                              \ InternalChannels

assert TreeSystemSpinInt :[divergence free]
assert TreeSystemSpinInt :[deadlock free]
assert TreeSystemSpinExtDiv :[divergence free] -- Should fail
assert TreeSystemSpinNoDiv :[divergence free]

-- Show trace equivalence between the two external lock events systems 
assert TreeSystemSpinExtDiv [T= TreeSystemSpinNoDiv
assert TreeSystemSpinNoDiv [T= TreeSystemSpinExtDiv

-- CheckAlwaysAvailable and TreeSystemSpinNoDiv are equivalent under traces
-- Root lock never becomes unavailable and ownership of the root lock is mutually exclusive
-- Ie. shows mutual-exclusion and deadlock-freedom for the root lock
CheckAlwaysAvailable = lockAcquired.L.0?t:Thread_SPIN -> 
                         lockReleased.L.0.t -> CheckAlwaysAvailable
assert TreeSystemSpinNoDiv \ diff(LockEvents, OnlyRootObtain(L.0, Thread_SPIN)) 
         [T= CheckAlwaysAvailable
assert CheckAlwaysAvailable [T= 
         TreeSystemSpinNoDiv \ diff(LockEvents, OnlyRootObtain(L.0, Thread_SPIN)) 

-- Extablish a bound on the number of failed getAndSet operations
-- TODO: double check and implement with simple equivalent
CountFailedTAS(n) =  
  if n > NLOCKS_SPIN or n < 0 then DIV
  else [] t: Thread_SPIN, l:Lock_SPIN @ getAndSet.l.t.True.True -> CountFailedTAS(n+1)
       [] set.L.0.t.False -> CountFailedTAS(0)
       [] set?l:diff(Lock_SPIN, {L.0})?_ -> CountFailedTAS(n)
       [] getAndSet.l.t.False?_ -> CountFailedTAS(n)
       [] getAndSet.l.t.True.False -> CountFailedTAS(n)
-- Passes
assert (CountFailedTAS(0) [|{|getAndSet, set|}|] TreeSystemSpinInt)  :[divergence free]
-- Fails
assert (CountFailedTAS(1) [|{|getAndSet, set|}|] TreeSystemSpinInt)  :[divergence free]


-- Check no divergence before any lock is first held with internal events visible
CheckNoDiv = [] t: Thread_SPIN, l : Lock_SPIN @ getAndSet.l.t.False.True -> STOP
             [] get.l.t?_ -> CheckNoDiv
             [] set.l.t?_ -> CheckNoDiv
             --[] t: Thread_SPIN @ getAndSet.l.t.True.Tr
assert (TreeSystemSpinInt [|{|getAndSet, get, set|}|] CheckNoDiv) \ 
          {|getAndSet, set, get|} :[divergence free]


-- A tree lock implementation with just external lock evenets visible
SimpleSystemL(t, L.x, ls) = end!t -> STOP
            [] callLock.L.x.t -> lockAcquired.L.x.t -> 
                if x == 0 then SimpleSystemU(t, L.0, ls) 
                else SimpleSystemL(t, L.((x-1)/2), <x>^ls)
SimpleSystemL(t, L.x, ls) = callLock.L.x.t -> lockAcquired.L.x.t -> 
            if x == 0 then SimpleSystemU(t, L.0, ls) 
            else SimpleSystemL(t, L.((x-1)/2), <x>^ls)
SimpleSystemU(T.y.z, L.x, <>) = lockReleased.L.x.T.y.z -> 
                                  SimpleSystemL(T.y.z, L.x, <>)
SimpleSystemU(T.y.z, L.x, <l>^ls) = lockReleased.L.x.T.y.z -> 
                                      SimpleSystemU(T.y.z, L.l, ls)

-- Put together the spec tree lock implementation
Simple = ||| (T.x.y) : Thread_SPEC @ SimpleSystemL(T.x.y, L.x, <>)
LocksSpec = ||| l : Lock_SPEC @ LockSpec(l, {}, Thread_SPEC)
SimpleSystem = Simple [|LockEvents|] LocksSpec

-- Check no divergence (since locks can't be released until thread holds root)
assert SimpleSystem :[divergence free]

-- Passes iff NTHREADS_SPIN == NTHREADS_SPEC; also shows trace 
-- equality with TreeSystemSpinNoDiv
assert SimpleSystem [T= TreeSystemSpinExtDiv
assert TreeSystemSpinExtDiv [T= SimpleSystem


-- Checks that root lock is always accessible
rootAccess = lockAcquired.L.0?t:Thread_SPEC -> rootAccess
assert SimpleSystem \ diff(LockEvents, {lockAcquired.L.0.t | t <- Thread_SPEC}) 
         [T= rootAccess

assert SimpleSystem \ diff({|lockReleased, callLock, lockAcquired|}, 
                           {lockAcquired.L.0.t | t <- Thread_SPEC}) 
         [T= rootAccess


-- Check that no thread is ever starved of the root lock
-- Test fails since underlying lock implementation is not starvation free
channel notStarved: ThreadID
SimpleStarvation(T.x.y) = lockAcquired.L.0.T?a:{(NLOCKS_SPEC-1)/2..NLOCKS_SPEC-1}?b -> 
                            if (a.b) == (x.y) and y == 1 then notStarved!T.a.b -> 
                                                                  SimpleStarvation(T.x.2)
                            else if (a.b) == (x.y) and (x.y) == (NLOCKS_SPEC-1.2) 
                              then notStarved!T.a.b -> SimpleStarvation(T.(NLOCKS_SPEC-1)/2.1)
                            else if (a.b) == (x.y) 
                              then notStarved!T.a.b -> SimpleStarvation(T.x+1.1) 
                            else SimpleStarvation(T.x.y)
assert SimpleStarvation(T.(NLOCKS_SPEC-1)/2.1) [|{lockAcquired.L.0.t| t<-Thread_SPEC}|] SimpleSystem \ LockEvents :[divergence free]--diff(LockEvents, {lockAcquiredt.L.0| t<-Thread_SPEC}) :[divergence free]

-- Bound no. lock acquisitions per root acquisition
lockAcquisitions(n) = if 0 <= n and n <= NLOCKS_SPEC then 
                         (lockReleased?t.l -> lockAcquisitions(n-1)
                         [] lockAcquired?t.l -> lockAcquisitions(n+1))
                      else DIV
assert lockAcquisitions(0) [|{|lockAcquired, lockReleased|}|] 
         SimpleSystem :[divergence free]
