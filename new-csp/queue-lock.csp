-- /** A lock using an array to store waiting threads in a queue.
--   * Based on Herlihy & Shavit, Section 7.5.1.
--   * @param capacity the number of workers who can use the lock. */ 

include "variable.csp"
include "lock-spec.csp"

NTHREADS = 2
CAPACITY = NTHREADS
INTBOUND = 4


datatype ThreadID = T.{1..NTHREADS}
datatype LockID = L
nametype BInt = {0..INTBOUND}
nametype Index = {1..CAPACITY}


WAIT = False
GO = True

channel delay: ThreadID
channel getAndSet: Index.ThreadID.Bool.Bool
channel get: Index.ThreadID.Bool
channel set: Index.ThreadID.Bool



-- Creates the AtomicInteger tail
channel tailGet, tailSet, tailGAI : ThreadID.Index
channel tailGAS : ThreadID.Index.Index
Tail = IntVar(1, tailGet, tailSet, tailGAS, tailGAI, 1, CAPACITY)
TailChannels = {|tailGet, tailSet, tailGAS, tailGAI|}

InternalChannels =  {|get, set, getAndSet|}
AllChannels = union(TailChannels, InternalChannels)

-- This effectively creates a 1-indexed array [1..NThreads] with 
-- [1] = Go, [2..NThreads] = WAIT
Flags = Array(diff(Index, {1}), WAIT, get, set, getAndSet)
FlagsInit = Array({1}, GO, get, set, getAndSet) ||| Flags


-- The following is the implementation of the queue-lock code with the 
-- following modifications:
--  - Since we co not care about cache collisions within CSP processes, 
--    we omit padding and hence the size of our array decreases by 16 
--    (which would have large performance ramifications). Only slots 
--    which are multiples of size are ever used; we do not need to keep 
--    these empty slots and we can simplify by using slots without 
--    multiplying by size
--  - We do not use mySlotIndex; we instead just pass the slot value 
--    directly to the unlock Process 
--  - We bound the value of tail instead of incrementing tail and then
--    modding it; this is to improve system performance and since we 
--    can guarantee tail never needs to be larger than CAPACITY (this 
--    can be checked by a simple deadlock free test)

Lock :: (ThreadID) -> Proc
Lock(t) = tailGAI.t?slot -> WaitForLock(t, slot) -- val slot = (tail.getAndIncrement * padding) % size

WaitForLock :: (ThreadID, Int) -> Proc                 
WaitForLock(t, slot) = get.slot.t?v:Bool -> 
                        if v == WAIT then 
                          delay!t -> WaitForLock(t, slot) 
                        else Unlock(t, slot)-- while(flags.get(slot) == Wait){ } // spin on flag(slot)

Unlock :: (ThreadID, Int) -> Proc
Unlock(t, slot) =    -- val slot = mySlotIndex.get // slotIndices(ThreadID.get)
            set.slot.t.WAIT -> -- flags.set(slot, Wait) // anyone waiting here must wait
            if slot < CAPACITY then set.(slot+1).t.GO -> NotHolding(t)-- flags.set((slot+padding)%size, Go) // next thread can progress
            else if slot == CAPACITY then set.1.t.GO -> NotHolding(t)
            else DIV

NotHolding(t) = callLock.L.t -> Lock(t)


AllThreads = ||| t : ThreadID @ NotHolding(t)
Variables = Tail ||| FlagsInit 
ActualSystemInt = (AllThreads [|AllChannels|] Variables)
ActualSystemLockEvents = ActualSystemInt 
                          [[get.s.t.GO <- lockAcquired.L.t, 
                            set.s.t.GO <- lockReleased.L.t | 
                            t <- ThreadID, s <- Index]] 
ActualSystemExtDiv = ActualSystemLockEvents \ union(AllChannels, {|delay|})
NoDiv = get?s?t!WAIT -> STOP
ActualSystemNoDiv = (ActualSystemLockEvents 
                      [|{get.s.t.WAIT | t <- ThreadID, s <- Index}|] 
                        NoDiv) \ union(AllChannels, {|delay|})

-- Obvious
assert ActualSystemInt :[divergence free]
assert ActualSystemInt :[deadlock free]
assert ActualSystemNoDiv :[divergence free]
assert ActualSystemNoDiv :[deadlock free]
assert ActualSystemExtDiv [T= ActualSystemNoDiv
assert ActualSystemNoDiv [T= ActualSystemExtDiv


-- Check that no two threads hold the lock at the same time
assert CheckMutualExclusion(L) [T= 
        ActualSystemNoDiv \ diff(LockEvents, OnlyRootObtain(L, ThreadID))

-- Check no divergence before the lock is first held
CheckNoDiv = [] t: ThreadID @ tailGAI.t.1 -> STOP
             [] tailGet?_ -> CheckNoDiv
             [] tailSet?_ -> CheckNoDiv
             [] tailGAS?_ -> CheckNoDiv
             [] tailGAI.t?x:{2..CAPACITY} -> CheckNoDiv
             [] get?_ -> CheckNoDiv
             [] set?_ -> CheckNoDiv
             [] getAndSet?_ -> CheckNoDiv 

CheckNoDiv' = [] t: ThreadID @ get?_?_.GO -> STOP
             [] tailGet?_ -> CheckNoDiv'
             [] tailSet?_ -> CheckNoDiv'
             [] tailGAS?_ -> CheckNoDiv'
             [] tailGAI.t?x:{2..CAPACITY} -> CheckNoDiv'
             [] get?_ -> CheckNoDiv'
             [] set?_ -> CheckNoDiv'
             [] getAndSet?_ -> CheckNoDiv'

assert (ActualSystemInt [|AllChannels|] CheckNoDiv) \ AllChannels :[divergence free]
assert (ActualSystemInt [|AllChannels|] CheckNoDiv') \ AllChannels :[divergence free]

-- -- -- Check that divergence can occur before thread releases lock (ie. whilst lock is held)
-- -- CheckNoDiv2 = [] t: ThreadID, x : BoundedThreadInt @ setbi.t.A.Flags.x.WAIT -> STOP
-- --              [] getbi.t.A.Flags.x.WAIT -> CheckNoDiv2
-- --              [] setbi.t?_ -> CheckNoDiv2
-- --              [] getAndIncrementBound.t?_ -> CheckNoDiv2
-- --              [] getAndSetbi.t?_ -> CheckNoDiv2
-- --              [] delay.t ->  CheckNoDiv2
-- -- noDivChannels2 = union(noDivChannels, {|delay|})
-- -- assert (ActualSystem [|noDivChannels2|] CheckNoDiv2) \ noDivChannels2 :[divergence free]

-- -- -- Check that divergence can't occur after lock release and before next obtained
-- -- CheckNoDivBetween = [] t: ThreadID, x : BoundedThreadInt @ setbi.t.A.Flags.x.WAIT -> CheckNoDiv3
-- --              [] getbi.t.A.Flags.x.WAIT -> CheckNoDivBetween
-- --              [] setbi.t?_ -> CheckNoDivBetween
-- --              [] getAndIncrementBound.t?_ -> CheckNoDivBetween
-- --              [] getAndSetbi.t?_ -> CheckNoDivBetween
-- --              [] delay.t ->  CheckNoDivBetween

-- -- CheckNoDiv3 = [] t: ThreadID, x : BoundedThreadInt @ getAndIncrementBound.t.Tail.B.2-> STOP
-- --              [] getbi.t.A.Flags.x.GO -> STOP
-- --              [] getbi.t.A.Flags.x.WAIT -> CheckNoDivBetween
-- --              [] setbi.t?_ -> CheckNoDivBetween
-- --              [] getAndIncrementBound.t?_ -> CheckNoDivBetween
-- --              [] getAndSetbi.t?_ -> CheckNoDivBetween
-- --              [] delay.t ->  CheckNoDivBetween

ActualSystemR = ActualSystemLockEvents [[]]


FCFS'(l, t, s1, s3) = 
     end.t -> FCFS3(l, t)
  [] callLock.l.t -> FCFS1'(l, t, s1, s3)
  [] doorwayComplete.l?t':diff(ThreadID, union({t}, union(s1, s3))) -> FCFS'(l, t, union(s1, {t'}), s3)
  [] lockAcquired.l?t':diff(union(s1, s3), {t}) -> FCFS'(l, t, diff(s1, {t'}), s3)


FCFS1'(l, t, s1, s3) = 
     doorwayComplete.l.t -> FCFS2'(l, t, s1, s3)
  [] doorwayComplete.l?t':diff(ThreadID, union({t}, union(s1, s3))) -> FCFS1'(l, t, s1, union(s3, {t'}))
  [] lockAcquired.l?t':diff(union(s1, s3), {t}) -> FCFS1'(l, t, diff(s1, {t'}), diff(s3, {t'}))

FCFS2'(l, t, s1, s3) = 
     empty(s1) & lockAcquired.l.t -> FCFS'(l, t, s3, {})
  [] doorwayComplete.l?t':diff(ThreadID, union({t}, union(s1, s3))) -> FCFS2'(l, t, s1, union(s3, {t'}))
  [] lockAcquired.l?t':diff(union(s1, s3), {t}) -> FCFS2'(l, t, diff(s1, {t'}), diff(s3, {t'}))

FCFS3(l, t) = 
     doorwayComplete.l?t':diff(ThreadID, {t}) -> FCFS3(l, t)
  [] lockAcquired.l?t':diff(ThreadID, {t}) -> FCFS3(l, t)

FCFSCheck'(l) = 
  || t <- ThreadID @ [union({callLock.l.t, end.t}, {|doorwayComplete.l, lockAcquired.l|})]
        FCFS'(l, t, {}, {})

assert FCFSCheck'(L.0) [F= FCFSActualSystemRExtDiv \ {|lockReleased|}





