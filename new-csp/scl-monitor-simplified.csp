module SCLMonitor


-- Including lock-support, but not as a module as multiple levels of module instances are not allowed
include "lock-support.csp"


channel enqueue, dequeue, setReady: MonitorID.ConditionID.ThreadID.ThreadID
channel isReady: MonitorID.ConditionID.ThreadID.ThreadID.Bool
channel isEmpty: MonitorID.ConditionID.ThreadID

channel await, signalAll: MonitorID.ConditionID.ThreadID
channel wakeUp: MonitorID.ConditionID.ThreadID.Bool

-- Models the waiters queue, also allowing updates to the thread readiness
Waiting :: (MonitorID, ConditionID, <ThreadID>, {ThreadID}) -> Proc
Waiting(mon, cnd, <>, rs) = 
     isEmpty.mon.cnd?t -> Waiting(mon, cnd, <>, rs)
  [] enqueue.mon.cnd?t?t2 -> Waiting(mon, cnd, <t2>, diff(rs, {t2}))
  [] isReady.mon.cnd?t?t2!(member(t2, rs)) -> Waiting(mon, cnd, <>, rs)
  [] setReady.mon.cnd?t?t2:diff(ThreadID, rs) -> 
       Waiting(mon, cnd, <>, union(rs, {t2}))

Waiting(mon, cnd, <t'>^ts, rs) =
     dequeue.mon.cnd?t!t' -> Waiting(mon, cnd, ts, rs)
  [] enqueue.mon.cnd?t?t2:diff(ThreadID, set(<t'>^ts)) -> 
       Waiting(mon, cnd, <t'>^ts^<t2>, diff(rs, {t2}))
  [] isReady.mon.cnd?t?t2!(member(t2, rs)) -> 
       Waiting(mon, cnd, <t'>^ts, rs)
  [] setReady.mon.cnd?t?t2:diff(ThreadID, rs) -> 
       Waiting(mon, cnd, <t'>^ts, union(rs, {t2}))



-- Models the actions of each function offered by the SCL monitor;
-- accessed following a callFUNC communication

Signal1(mon, cnd, t) = 
     isEmpty.mon.cnd.t -> SKIP
  [] dequeue.mon.cnd.t?t2 -> isReady.mon.cnd.t.t2?b ->
      if b then Signal1(mon, cnd, t)
      else setReady.mon.cnd.t.t2 -> Unpark(mon, cnd, t, t2); SKIP

SignalAll1(mon, cnd, t) =
     isEmpty.mon.cnd.t -> SKIP
  [] dequeue.mon.cnd.t?t2 -> setReady.mon.cnd.t.t2 -> 
          Unpark(mon, cnd, t, t2); SignalAll1(mon, cnd, t)

Await1(mon, cnd, t) = 
  enqueue.mon.cnd.t.t -> release.mon.cnd.t -> Await2(mon, cnd, t)

Await2(mon, cnd, t) = 
  isReady.mon.cnd.t.t?b -> if b then acquire.mon.cnd.t -> SKIP
                           else Park(mon, cnd, t); Await2(mon, cnd, t)


-- We seperate the threads into 5 partitions:
--   - Those that haven't `callAcquire`, at least since they last released the 
--     lock: their next communication is a callAcquire
--   - The threads that are `trying` to acquire the lock;  their next 
--     communication is an `acquire`
--   - The parked threads that haven't woken up; their next communication is a 
--     wakeUp (spurious or otherwise)
--   - The threads that are about `toPark`, with their next communication being 
--     to park (either after awaiting or a spurious wakeup)
--   - The threads 
Unlocked'(m, c, trying, parked, toPark, awaitPark) =
     callAcquire.m.c?t':diff(ThreadID, Union({trying, parked, toPark})) -> 
       Unlocked'(m, c, union(trying, {t'}), parked, toPark, awaitPark)
  [] acquire.m.c?t:trying ->
       Locked'(m, c, t, diff(trying, {t}), parked, toPark, awaitPark, false, false, false, false)
  [] wakeUp.m.c?t':parked!false -> 
       Unlocked'(m, c, trying, diff(parked, {t'}), union(toPark, {t'}), awaitPark)
  [] wakeUp.m.c?t':parked!true -> 
       Unlocked'(m, c, trying, diff(parked, {t'}), toPark, union(awaitPark, {t'}))
  [] park.m.c?t':union(toPark, awaitPark) ->
       --Unlocked'(m, c, trying, union(parked, {t'}), diff(toPark, {t'}), diff(awaitPark, {t'}))
       Unlocked'(m, c, trying, union(parked, {t'}), diff(toPark, {t'}), awaitPark)
  -- [] isReady.m.c?t1?t2:diff(ThreadID, {t1})?_ ->
  --      Unlocked'(m, c, trying, parked, toPark, awaitPark)
  [] isReady.m.c?t1!t1!true ->
       --Unlocked'(m, c, union(trying, {t1}), parked, diff(toPark, {t1}), diff(awaitPark, {t1}))
       Unlocked'(m, c, union(trying, {t1}), parked, diff(toPark, {t1}), awaitPark)
  [] isReady.m.c?t2!t2!false -> 
       Unlocked'(m, c, trying, parked, union(toPark, {t2}), diff(awaitPark, {t2}))


Locked'(m, c, t, trying, parked, toPark, awaitPark, rel, wait, sig1, sigAll) = 
  -- The 'unblockable' functions
       callAcquire.m.c?t':diff(ThreadID, Union({trying, parked, toPark, {t}})) ->
        Locked'(m, c, t, union(trying, {t'}), parked, toPark, awaitPark, rel, wait, sig1, sigAll)
  []   park.m.c?t':union(toPark, awaitPark) ->
         --Locked'(m, c, t, trying, union(parked, {t'}), diff(toPark, {t'}), diff(awaitPark, {t'}), rel, wait, sig1, sigAll)
         Locked'(m, c, t, trying, union(parked, {t'}), diff(toPark, {t'}), awaitPark, rel, wait, sig1, sigAll)
  []   wakeUp.m.c?t':parked!false -> 
         Locked'(m, c, t, trying, diff(parked, {t'}), union(toPark, {t'}), awaitPark, rel, wait, sig1, sigAll)
  []   wakeUp.m.c?t':parked!true -> 
         Locked'(m, c, t, trying, diff(parked, {t'}), toPark, union(awaitPark, {t'}), rel, wait, sig1, sigAll)
  -- []   isReady.m.c?t1?t2:diff(ThreadID, {t1})?_ ->
  --        Locked'(m, c, t, trying, parked, toPark, awaitPark, rel, wait, sig1, sigAll)
  []   isReady.m.c?t1!t1!true ->
         --Locked'(m, c, t, union(trying, {t1}), parked, diff(toPark, {t1}), diff(awaitPark, {t1}), rel, wait, sig1, sigAll)
         Locked'(m, c, t, union(trying, {t1}), parked, diff(toPark, {t1}), awaitPark, rel, wait, sig1, sigAll)
  []   isReady.m.c?t2!t2!false -> 
         Locked'(m, c, t, trying, parked, union(toPark, {t2}), diff(awaitPark, {t2}), rel, wait, sig1, sigAll)
  -- Communications restricted by most recent function call by holding function
  [] (sig1 or sigAll) & 
       (setReady.m.c.t?t' ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, false, false, false, sigAll))
  [] (sig1 or sigAll) & 
       (isEmpty.m.c.t ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, false, false, false, false))
  [] (rel) & 
       (release.m.c.t ->
         Unlocked'(m, c, trying, parked, toPark, awaitPark))
  [] (wait) & 
       (release.m.c.t ->
         Unlocked'(m, c, trying, parked, toPark, union(awaitPark, {t})))
  -- Allows calling of functions by holding thread
  [] (not(sig1 or sigAll or rel)) & 
       (callRelease.m.c.t ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, true, false, false, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callAwait.m.c.t ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, false, true, false, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callSignal.m.c.t ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, false, false, true, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callSignalAll.m.c.t ->
         Locked'(m, c, t, trying, parked, toPark, awaitPark, false, false, false, true))

InitialiseMon0(m, c) = 
  (Unlocked'(m, c, {}, {}, {}, {}) 
    [|union({|wakeUp.m.c, park.m.c, setReady.m.c, isEmpty.m.c|},
            {isReady.m.c.t.t.b | t <- ThreadID, b <- Bool})|] 
      (Waiting(m, c, <>, {}) ||| InitLockSupp(m, c)))

InitialiseMonDet0(m, c) = 
  (Unlocked'(m, c, {}, {}, {}, {}) 
    [|union({|wakeUp.m.c, park.m.c, setReady.m.c, isEmpty.m.c|},
            {isReady.m.c.t.t.b | t <- ThreadID, b <- Bool})|]
      (Waiting(m, c, <>, {}) ||| InitLockSuppDet(m, c)))



-- We seperate the threads into 5 partitions:
--   - Those that haven't `callAcquire`, at least since they last released the 
--     lock: their next communication is a callAcquire
--   - The threads that are `trying` to acquire the lock;  their next 
--     communication is an `acquire`
--   - The parked threads that haven't woken up; their next communication is a 
--     wakeUp (spurious or otherwise)
--   - The threads that are about `toPark`, with their next communication being 
--     to park (after checking that their isReady returned false)
--   - The threads that need to check their `isReady` value to determine whether to park again (false) or not (true)

Unlocked''(m, c, trying, parked, toPark, awaitPark) =
     callAcquire.m.c?t':diff(ThreadID, Union({trying, parked, toPark})) -> 
       Unlocked''(m, c, union(trying, {t'}), parked, toPark, awaitPark)
  [] acquire.m.c?t:trying ->
       Locked''(m, c, t, diff(trying, {t}), parked, toPark, awaitPark, false, false, false, false)
  []  wakeUp.m.c?t':parked?_ ->
       Unlocked''(m, c, trying, diff(parked, {t'}), toPark, union(awaitPark, {t'}))
  [] park.m.c?t':toPark ->
       Unlocked''(m, c, trying, union(parked, {t'}), diff(toPark, {t'}), awaitPark)
  [] isReady.m.c?t1!t1!true ->
       Unlocked''(m, c, union(trying, {t1}), parked, toPark, diff(awaitPark, {t1}))
  [] isReady.m.c?t2!t2!false -> 
       Unlocked''(m, c, trying, parked, union(toPark, {t2}), diff(awaitPark, {t2}))

Locked''(m, c, t, trying, parked, toPark, awaitPark, rel, wait, sig1, sigAll) = 
  -- The 'unblockable' functions
       callAcquire.m.c?t':diff(ThreadID, Union({trying, parked, toPark, {t}})) ->
        Locked''(m, c, t, union(trying, {t'}), parked, toPark, awaitPark, rel, wait, sig1, sigAll)
  [] park.m.c?t':toPark ->
         Locked''(m, c, t, trying, union(parked, {t'}), diff(toPark, {t'}), awaitPark, rel, wait, sig1, sigAll)
  []  wakeUp.m.c?t':parked?_ ->
         Locked''(m, c, t, trying, diff(parked, {t'}), toPark, union(awaitPark, {t'}), rel, wait, sig1, sigAll)
  []   isReady.m.c?t1!t1!true ->
         Locked''(m, c, t, union(trying, {t1}), parked, toPark, diff(awaitPark, {t1}), rel, wait, sig1, sigAll)
  []   isReady.m.c?t2!t2!false -> 
         Locked''(m, c, t, trying, parked, union(toPark, {t2}), diff(awaitPark, {t2}), rel, wait, sig1, sigAll)
  -- Communications restricted by most recent function call by holding function
  [] (sig1 or sigAll) & 
       (setReady.m.c.t?t' ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, false, false, false, sigAll))
  [] (sig1 or sigAll) & 
       (isEmpty.m.c.t ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, false, false, false, false))
  [] (rel) & 
       (release.m.c.t ->
         Unlocked''(m, c, trying, parked, toPark, awaitPark))
  [] (wait) & 
       (release.m.c.t ->
         Unlocked''(m, c, trying, parked, toPark, union(awaitPark, {t})))
  -- Allows calling of functions by holding thread
  [] (not(sig1 or sigAll or rel)) & 
       (callRelease.m.c.t ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, true, false, false, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callAwait.m.c.t ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, false, true, false, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callSignal.m.c.t ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, false, false, true, false))
  [] (not(sig1 or sigAll or rel)) & 
       (callSignalAll.m.c.t ->
         Locked''(m, c, t, trying, parked, toPark, awaitPark, false, false, false, true))

InitialiseMon0''(m, c) = 
  (Unlocked''(m, c, {}, {}, {}, {}) 
    [|union({|wakeUp.m.c, park.m.c, setReady.m.c, isEmpty.m.c|},
            {isReady.m.c.t.t.b | t <- ThreadID, b <- Bool})|] 
      (Waiting(m, c, <>, {}) ||| InitLockSupp(m, c)))

InitialiseMonDet0''(m, c) = 
  (Unlocked''(m, c, {}, {}, {}, {}) 
    [|union({|wakeUp.m.c, park.m.c, setReady.m.c, isEmpty.m.c|},
            {isReady.m.c.t.t.b | t <- ThreadID, b <- Bool})|]
      (Waiting(m, c, <>, {}) ||| InitLockSuppDet(m, c)))



SyncSet(m, c) =
  union(External(m, c), HideSet(m, c))

HideSet(m, c) = 
  {|park.m.c, unpark.m.c, wakeUp.m.c, enqueue.m.c, dequeue.m.c, setReady.m.c, 
    isReady.m.c, isEmpty.m.c|}


exports

channel acquire, release: MonitorID.ConditionID.ThreadID
channel callAcquire, callRelease: MonitorID.ConditionID.ThreadID
channel callAwait, callSignalAll: MonitorID.ConditionID.ThreadID
channel callSignal: MonitorID.ConditionID.ThreadID
External(m, c) = 
  {|callSignal.m.c, callAwait.m.c, callSignalAll.m.c, callAcquire.m.c, 
    acquire.m.c, callRelease.m.c, release.m.c|}


InitialiseMon(mon, cnd) = InitialiseMon0''(mon, cnd)
runWith(P, mon, cnd) = 
  (P [|SyncSet(mon, cnd)|] InitialiseMon(mon, cnd) \ HideSet(mon, cnd))

InitialiseMonDet(mon, cnd) = InitialiseMonDet0''(mon, cnd)
runWithDet(P, mon, cnd) = 
  (P [|SyncSet(mon, cnd)|] InitialiseMonDet(mon, cnd) \  HideSet(mon, cnd))
  

-- Operations on the monitor
Await(mon, cnd, t) = callAwait.mon.cnd.t -> 
                        Await1(mon, cnd, t)

Signal(mon, cnd, t) = callSignal.mon.cnd.t -> 
                        Signal1(mon, cnd, t)

SignalAll(mon, cnd, t) = callSignalAll.mon.cnd.t -> 
                            SignalAll1(mon, cnd, t)

Lock(mon, cnd, t) = callAcquire.mon.cnd.t -> 
                    acquire.mon.cnd.t -> SKIP

Unlock(mon, cnd, t) = callRelease.mon.cnd.t -> 
                    release.mon.cnd.t -> SKIP

endmodule
