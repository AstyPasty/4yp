include "variable.csp"

include "MyJVMMonitor.csp"
--include "scl-monitor.csp"

-- datatype SignalID = S.{0}
-- datatype MonitorID = SigM.SignalID
-- datatype ThreadID = T.{0}


-- WaitNotify and Notifying are used to model the wait and notify functions
-- WaitNotify tracks the waiting threads (for a given object), then once 
-- a notify is receievd Notifying is used to notify the threads
-- This is so that a notify doesn't have to sync with each thread 
-- (particularly, so each notfy isn't blocking)


-- The state variable for the signal objects
channel getState, setState : SignalID . ThreadID . Bool
stateChannels(s) = {|getState.s, setState.s|}
State :: (SignalID) -> Proc
State(s) = Var(false, getState.s, setState.s)

channel callSignalUpAndWait, callWaitForSignalUp, callSignalDown : SignalID . ThreadID
signalChannels = {|callSignalUpAndWait, callWaitForSignalUp, callSignalDown|}

-- The different signal 'functions' can be found below
-- Each of them consist of two stages:
--  1. Announcing the call and entering the syunchronized block
--  2. Completing the CSP translation of the original code


SignalUpAndWait :: (SignalID, ThreadID) -> Proc
SignalUpAndWait(s, t) = 
  callSignalUpAndWait.s.t -> Synchronized(SigM.s, t, SignalUpAndWait2(s, t))
SignalUpAndWait2(s, t) = 
  getState.s.t?val -> if val == true then DIV -- Required to be false
                      else setState.s.t.true -> 
                           Notify(SigM.s, t); SignalWaitingForFalse(s, t)

WaitForSignalUp :: (SignalID, ThreadID) -> Proc  
WaitForSignalUp(s, t) = 
  callWaitForSignalUp.s.t -> Synchronized(SigM.s, t, WaitForSignalUp2(s, t))        
WaitForSignalUp2(s, t) = 
  getState.s.t?val -> if val == true then  SKIP 
                      else Wait(SigM.s, t); WaitForSignalUp2(s, t)

SignalDown :: (SignalID, ThreadID) -> Proc
SignalDown(s, t) = callSignalDown.s.t -> Synchronized(SigM.s, t, SignalDown2(s, t))
SignalDown2(s, t) = setState.s.t.false -> Notify(SigM.s, t); SKIP

-- The implementations of the while loops
SignalWaitingForFalse :: (SignalID, ThreadID) -> Proc
SignalWaitingForFalse(s, t) = 
  getState.s.t?val -> if val == false then SKIP
                      else Wait(SigM.s, t); SignalWaitingForFalse(s, t)
                                
-- SignalWaitingForTrue :: (SignalID, ThreadID) -> Proc
-- SignalWaitingForTrue(s, t) = getState.s.t?val ->
--                           if val == true then  SKIP 
--                           else Wait(SigM.s, t); SignalWaitingForTrue(s, t)

-- We now initialise the components required to run the heap of Signal
-- objects

--NewInitialiseSignals = 


-- OldInitialiseSignals(threads) = 
--   (threads [|union(events, allStateChannels)|] 
--     (States ||| InitialiseAll)) \ union(allStateChannels, events)

-- OldNewInitialiseSignals(threads) = 
--   ((threads [|allStateChannels|] States) [|events|]  InitialiseAll) \ union(allStateChannels, events)

InitialiseSignal(sig, threads) = 
  runWith(SigM.sig, threads [|stateChannels(sig)|] State(sig)) 
      \ union(stateChannels(sig), events)

allStateChannels(sigs) = {|getState.s, setState.s | s <- sigs|}
States(sigs) = ||| s <- sigs @ State(s)
monitors(sigs) = {SigM.s | s <- sigs}

InitialiseSignals(sigs, threads) = 
  runWithMultiple(monitors(sigs), threads [|allStateChannels(sigs)|] States(sigs))  
      \ union(allStateChannels(sigs), events)

-- Test = (SigM.S.0, T.0)

-- assert InitialiseSignals(Test) [T= signal.SigM.S.0.T.0 -> STOP
-- assert signal.SigM.S.0.T.0 -> STOP [T= InitialiseSignals(Test) 


-- InitialiseSpurMonitors = ||| s <- SignalID @ InitialiseAll--InitialiseSpurMonitor(SigM.s)
-- InitialiseSpurSignals(threads) = 
--   threads [|union(events, allStateChannels)|] (States ||| InitialiseSpurMonitors)


-- Spec version of signal

-- Channels used to handle the synchronizations between threads on the
-- 3 public functions, with endWaitForSignalUp indicating that state would've been
-- set to true and endSignalUpAndWait indicating false
channel endWaitForSignalUp, endSignalUpAndWait : SignalID . ThreadID
waitChannels = {|endWaitForSignalUp, endSignalUpAndWait|}

-- Simplified spec for a correctly used Signal object
SpecSig(s) = 
     callSignalUpAndWait.s?t -> callWaitForSignalUp.s?t2 -> SpecSig2(s, t, t2)
  [] callWaitForSignalUp.s?t2 -> callSignalUpAndWait.s?t -> SpecSig2(s, t, t2)
SpecSig2(s, t, t2) = 
  endWaitForSignalUp.s.t2 -> callSignalDown.s.t2 -> endSignalUpAndWait.s.t -> SpecSig(s)

-- The individual functions for the Signal object
SpecSignalUpAndWait(s, t) = callSignalUpAndWait.s.t -> endSignalUpAndWait.s.t -> SKIP
SpecWaitForSignalUp(s, t) = callWaitForSignalUp.s.t -> endWaitForSignalUp.s.t -> SKIP
SpecSignalDown(s, t) = callSignalDown.s.t -> SKIP

--Construct the system for each of the SpecSig objects
SpecSignals = || s <- SignalID @ [{|callSignalUpAndWait.s, callWaitForSignalUp.s, 
                                    callSignalDown.s, endWaitForSignalUp.s, endSignalUpAndWait.s|}] 
                                      SpecSig(s) 
-- Method for barrier-sync to initialise the two objects
InitialiseSpecSignals(threads) = 
  (SpecSignals [|union(signalChannels, waitChannels)|] threads) \ waitChannels

SingleSignal(ts, s) = InitialiseSignal(s, ts) \ diff({|callSignalUpAndWait, callWaitForSignalUp, 
                                    callSignalDown|}, {|callSignalUpAndWait.s, callWaitForSignalUp.s, 
                                    callSignalDown.s|}
                                    )



-- Lazy abstraction in Roscoes book