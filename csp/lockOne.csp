-- A lock based upon the test-and-set operation with fixed-time backoff.
--  * Based on Herlihy & Shavit, Section 7.4. 
--  * @param delay the time in nanoseconds to delay when conflict detected.


datatype Variable = Thread0 | Thread1
datatype ThreadID = T0 | T1 --| T2 | T3 | T4 


channel atomic: Variable
channel delay: ThreadID
channel tryLock: ThreadID
channel lock : ThreadID
channel getAndSet: ThreadID.Variable.Bool
channel get: ThreadID.Variable.Bool
channel set: ThreadID.Variable.Bool
channel enteringLock: ThreadID
channel exitingLock: ThreadID
channel exitedLock: ThreadID


Atomic :: Proc
Atomic = atomic?v -> atomic!v -> Atomic




--Spin = delay?t -> Spin

BoolVar :: (Variable, Bool) -> Proc

BoolVar(me, v) = getAndSet?t!me?value -> getAndSet!t!me!v -> BoolVar(me, value)
            []   get?t!me?_ -> get!t!me!v -> BoolVar(me, v)
            []   set?t!me?b -> set!t.me!b -> BoolVar(me, b)


Lock :: (ThreadID) -> Proc
Lock(t) = (t == T0) & set!t.Thread0.True -> set.t.Thread0?v -> WaitOn(t, Thread1)
        [] (t == T1) & set!t.Thread1.True -> set.t.Thread1?v -> WaitOn(t, Thread0)


WaitOn :: (ThreadID, Variable) -> Proc
WaitOn(t, target) = get!t.target.True -> get!t.target?v -> if v == False then Holding(t) else WaitOn(t, target)

Unlock :: (ThreadID) -> Proc
Unlock(t) = (t == T0) & exitingLock!t -> set.t.Thread0!False -> exitedLock!t -> set.t.Thread0?v -> if v == False then NotHolding(t) else DIV-- def unlock = state.set(false)
         [] (t == T1) & exitingLock!t -> set.t.Thread1!False -> exitedLock!t -> set.t.Thread1?v -> if v == False then NotHolding(t) else DIV-- def unlock = state.set(false)

Holding(t) = enteringLock!t -> Unlock(t)

NotHolding(t) = Lock(t)

AtomicCheck :: (Bool) -> Proc
AtomicCheck(b) = [] t : ThreadID @ AtomicThread(b, t)
AtomicThread :: (Bool, ThreadID) -> Proc
AtomicThread(b, t) = if b ==  True then (get!t.Thread0.True -> get!t.Thread0?True -> AtomicCheck(True)
                     [] set!t.Thread0.True -> set!t.Thread0?True -> AtomicCheck(True)
                     [] set!t.Thread0.False -> set!t.Thread0?False -> AtomicCheck(False)
                     [] getAndSet!t.Thread0.True -> getAndSet!t.Thread0?True -> AtomicCheck(True)
                     [] getAndSet!t.Thread0.False -> getAndSet!t.Thread0?True -> AtomicCheck(False))
                     else (get!t.Thread0.True -> get!t.Thread0?False -> AtomicCheck(False)
                     [] set!t.Thread0.True -> set!t.Thread0?True -> AtomicCheck(True)
                     [] set!t.Thread0.False -> set!t.Thread0?False -> AtomicCheck(False)
                     [] getAndSet!t.Thread0.True -> getAndSet!t.Thread0?False -> AtomicCheck(True)
                     [] getAndSet!t.Thread0.False -> getAndSet!t.Thread0?False -> AtomicCheck(False))



AllThreads = ||| t : ThreadID @ NotHolding(t)
Components = BoolVar(Thread1, False) ||| BoolVar(Thread0, False)
AllChannels = {|get, set, getAndSet|}


ActualSystem = (AllThreads [|AllChannels|] Components)

-- Obvious
assert ActualSystem :[divergence free]
assert ActualSystem :[deadlock free]
LockObtain = enteringLock.T0 -> exitingLock.T0 -> exitedLock.T0 -> LockObtain 
         |~| enteringLock.T1 -> exitingLock.T1 -> exitedLock.T1 -> LockObtain 

-- Fails as intended, Counterexample of correct length
assert (ActualSystem [|{|exitedLock, exitingLock, enteringLock|}|] LockObtain) [T= ActualSystem
assert (ActualSystem [|{|exitedLock, exitingLock, enteringLock|}|] LockObtain) \{|get, set, getAndSet|} :[divergence free]
assert ActualSystem \{|get, set, getAndSet|} :[divergence free]

assert ActualSystem [T= set!T0.Thread0.True -> set.T0.Thread0.True -> set!T1.Thread1.True -> set.T1.Thread1.True -> get!T0.Thread1.True -> get!T0.Thread1.True -> STOP
-- Check that all operations on state are seemingly atomic
assert AtomicCheck(False) [T= ActualSystem\{|enteringLock, exitingLock, exitedLock|}

CheckMutualExclusion = enteringLock?t -> exitingLock?t -> exitedLock?t -> CheckMutualExclusion
-- Check that no two threads hold the lock at the same time
assert CheckMutualExclusion [T= ActualSystem\{|get, set, getAndSet|}

CheckNoExtraSpins :: ({ThreadID}) -> Proc
CheckNoExtraSpins({}) = exitedLock?t -> delay?u -> CheckNoExtraSpins({u})
CheckNoExtraSpins(xs) = delay?y -> if card(inter(xs, {y})) == 0 then CheckNoExtraSpins(union({y}, xs)) else DIV

assert CheckNoExtraSpins({})[|{|exitedLock, delay, enteringLock|}|]ActualSystem :[divergence free]


-- Force multiple communications to occur sequentially
