include "variable.csp"

--include "MyJVMMonitor.csp"
include "JVMMonitorModule.csp"

instance Monitors = JVMMonitor(MonitorID)

-- WaitNotify and Notifying are used to model the wait and notify functions
-- WaitNotify tracks the waiting threads (for a given object), then once 
-- a notify is receievd Notifying is used to notify the threads
-- This is so that a notify doesn't have to sync with each thread 
-- (particularly, so each notfy isn't blocking)


-- The state variable for the signal objects
channel getState, setState : SignalID . ThreadID . Bool
stateChannels = {|getState, setState|}
State = Array(SignalID, false, getState, setState)


-- The channels to represent a call of each of the methods offered by 
-- the signal object
channel callSignalUpAndWait, callWaitForSignalUp, callSignalDown : SignalID . ThreadID
signalChannels = {|callSignalUpAndWait, callWaitForSignalUp, callSignalDown|}

-- The different signal 'functions' can be found below
-- Each of them consist of two stages:
--  1. Announcing the call and entering the syunchronized block
--  2. Completing the CSP translation of the original code
Signal :: (SignalID) -> Proc
Signal(s) = Var(false, (getState.s), (setState.s))

SignalUpAndWait :: (SignalID, ThreadID) -> Proc
SignalUpAndWait(s, t) = 
  callSignalUpAndWait.s.t -> Monitors::Synchronized(SigM.s, t, SignalUpAndWait2(s, t))
SignalUpAndWait2(s, t) = 
  getState.s.t?val -> if val == true then DIV -- Required to be false
                      else setState.s.t.true -> 
                           Monitors::Notify(SigM.s, t); SignalWaitingForFalse(s, t)

WaitForSignalUp :: (SignalID, ThreadID) -> Proc  
WaitForSignalUp(s, t) = 
  callWaitForSignalUp.s.t -> Monitors::Synchronized(SigM.s, t, WaitForSignalUp2(s, t))        
WaitForSignalUp2(s, t) = 
  getState.s.t?val -> if val == true then  SKIP 
                      else Monitors::Wait(SigM.s, t); WaitForSignalUp2(s, t)

SignalDown :: (SignalID, ThreadID) -> Proc
SignalDown(s, t) = callSignalDown.s.t -> Monitors::Synchronized(SigM.s, t, SignalDown2(s, t))
SignalDown2(s, t) = setState.s.t.false -> Monitors::Notify(SigM.s, t); SKIP

-- The implementations of the while loops
SignalWaitingForFalse :: (SignalID, ThreadID) -> Proc
SignalWaitingForFalse(s, t) = 
  getState.s.t?val -> if val == false then SKIP
                      else Monitors::Wait(SigM.s, t); SignalWaitingForFalse(s, t)
                                
-- SignalWaitingForTrue :: (SignalID, ThreadID) -> Proc
-- SignalWaitingForTrue(s, t) = getState.s.t?val ->
--                           if val == true then  SKIP 
--                           else Wait(SigM.s, t); SignalWaitingForTrue(s, t)

-- We now initialise the components required to run the heap of Signal
-- objects

RunSystem(threads, sigs) =
  Monitors::runWith(threads [|stateChannels|] State)

InitialiseAlls = ||| s <- SignalID @ Monitors::InitialiseAll(SigM.s)
InitialiseSignals(threads) = 
  (threads [|union(Monitors::events, stateChannels)|] 
    (State ||| InitialiseAlls)) \ union(stateChannels, Monitors::events)
InitialiseSpurMonitors = ||| s <- SignalID @ Monitors::InitialiseAll(SigM.s)--Monitors::InitialiseSpurMonitor(SigM.s)
InitialiseSpurSignals(threads) = 
  threads [|union(Monitors::events, stateChannels)|] (State ||| InitialiseSpurMonitors)


-- Spec version of signal

-- Channels used to handle the synchronizations between threads on the
-- 3 public functions, with endWaitForSignalUp indicating that state would've been
-- set to true and endSignalUpAndWait indicating false
channel endWaitForSignalUp, endSignalUpAndWait : SignalID . ThreadID
waitChannels = {|endWaitForSignalUp, endSignalUpAndWait|}

-- Simplified spec for a correctly used Signal object
SpecSig(s) = 
     callSignalUpAndWait.s?t -> callWaitForSignalUp.s?t2 -> SpecSig2(s, t, t2)
  [] callWaitForSignalUp.s?t2 -> callSignalUpAndWait.s?t -> SpecSig2(s, t, t2)
SpecSig2(s, t, t2) = 
  endWaitForSignalUp.s.t2 -> callSignalDown.s.t2 -> endSignalUpAndWait.s.t -> SpecSig(s)

-- The individual functions for the Signal object
SpecSignalUpAndWait(s, t) = callSignalUpAndWait.s.t -> endSignalUpAndWait.s.t -> SKIP
SpecWaitForSignalUp(s, t) = callWaitForSignalUp.s.t -> endWaitForSignalUp.s.t -> SKIP
SpecSignalDown(s, t) = callSignalDown.s.t -> SKIP

--Construct the system for each of the SpecSig objects
SpecSignals = || s <- SignalID @ [{|callSignalUpAndWait.s, callWaitForSignalUp.s, 
                                    callSignalDown.s, endWaitForSignalUp.s, endSignalUpAndWait.s|}] 
                                      SpecSig(s) 
-- Method for barrier-sync to initialise the two objects
InitialiseSpecSignals(threads) = 
  (SpecSignals [|union(signalChannels, waitChannels)|] threads) \ waitChannels


-- Lazy abstraction in Roscoes book