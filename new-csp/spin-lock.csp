-- A lock based upon the test-and-set operation with fixed-time backoff.
--  * Based on Herlihy & Shavit, Section 7.4. 
--  * @param delay the time in nanoseconds to delay when conflict detected.

include "variable.csp"
include "lock-spec.csp"

NTHREADS = 5

datatype ThreadID = T.{0..NTHREADS-1}
datatype LockID = L

channel delay: ThreadID

LockEvents = {|callLock, lockObtained, lockNotObtained, lockUnlocked|}
LockChans = {callLock, lockObtained, lockNotObtained, lockUnlocked}--, lockUnlocked}


-- state variable
channel getState, setState : ThreadID . Bool
channel gASState : ThreadID . Bool . Bool
State = Var(false, getState, setState, gASState)
InternalChannels = {|getState, setState, gASState, delay|}


Lock :: (ThreadID) -> Proc
Lock(t) =  getState.t?s -> if s == True then Lock(t) -- while(state.get()){ }
           else gASState.t?v!True -> if v == False then Holding(t) -- if(! state.getAndSet(true)) done = true
           else delay!t -> Lock(t)

Unlock :: (ThreadID) -> Proc
Unlock(t) = setState.t!False -> NotHolding(t) -- def unlock = state.set(false)

TryLock :: (ThreadID) -> Proc
TryLock(t) = getState.t?s -> if s == True then lockNotObtained.L.t -> NotHolding(t) else gASState.t?v!True -> if v == False then Holding(t) else lockNotObtained.L.t -> NotHolding(t)  --!state.get && !state.getAndSet(true)

Holding(t) = Unlock(t)

NotHolding(t) = callLock.L.t -> Lock(t)--(TryLock(t) |~| Lock(t))


AllThreads = ||| t : ThreadID @ NotHolding(t)
AllChannels = Union({{|delay|}, InternalChannels, LockEvents})
ActualSystem = (AllThreads [|InternalChannels|] State)
ActualSystemR = ActualSystem [[gASState.t.False.True <- lockObtained.L.t, setState.t.False <- lockUnlocked.L.t | t <- ThreadID]]

-- Obvious
assert ActualSystem :[divergence free]
assert ActualSystem :[deadlock free]


-- Check that no two threads hold the lock at the same time
CheckMutualExclusion = gASState?t!False.True -> setState.t.False -> CheckMutualExclusion
assert CheckMutualExclusion [T= (ActualSystem\(diff(AllChannels, {gASState.t.False.True, setState.t.False | t <- ThreadID})))

-- Check no divergence before the lock is first held
CheckNoDiv = gASState?t!False.True -> STOP
             [] getState?t._ -> CheckNoDiv
assert (ActualSystem [|{|gASState, getState|}|] CheckNoDiv) \ {|getState|} :[divergence free]


assert LockSpec(L, {}, ThreadID) [T= (ActualSystemR \ InternalChannels)
assert (ActualSystemR \ InternalChannels) [T= LockSpec(L, {}, ThreadID)