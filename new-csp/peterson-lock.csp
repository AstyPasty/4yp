-- A lock based upon the test-and-set operation with fixed-time backoff.
--  * Based on Herlihy & Shavit, Section 7.4. 
--  * @param delay the time in nanoseconds to delay when conflict detected.

include "variable.csp"
--include "lock-spec.csp"

NTHREADS = 2

datatype Index = I.{0..2}
datatype ThreadID = T.{0..1}
datatype LockID = L.{0}

channel callLock: LockID.ThreadID
channel lockAcquired: LockID.ThreadID
channel lockNotObtained: LockID.ThreadID
channel lockReleased: LockID.ThreadID
channel end: ThreadID

LockEvents = {|callLock, lockAcquired, lockNotObtained, lockReleased|}
LockEndEvents = union(LockEvents, {|end|})
LockChans = {callLock, lockAcquired, lockNotObtained, lockReleased}


channel getAndSet: Index.ThreadID.Bool.Bool
channel get: Index.ThreadID.Bool
channel set: Index.ThreadID.Bool
Variables = AtomicArray(Index, false, get, set, getAndSet)
InternalVarChannels = {|get, set, getAndSet|}
InternalChannels = {|get, set, getAndSet|}



Lock :: (ThreadID) -> Proc
Lock(T.x) = if x == 1 then set.I.x.T.x.True -> set.I.2.T.x.True -> WhileLock(T.x)
            else if x == 0 then set.I.x.T.x.True -> set.I.2.T.x.False -> WhileLock(T.x)
            else DIV
WhileLock(T.x) = get.I.1-x.T.x?v -> if v == False then SKIP -- Hold lock
                                  else get.I.2.T.x?y ->
                                    if x == 1 and y == True then WhileLock(T.x)
                                    else if x == 0 and y == False then WhileLock(T.x)
                                    else SKIP


Unlock :: (ThreadID) -> Proc
Unlock(T.x) = set.I.x.T.x.False -> SKIP


Thread(T.x) = callLock.L.0.T.x -> Lock(T.x); Unlock(T.x); Thread(T.x)
            [] end.T.x -> SKIP --|~| end.t -> SKIP


-- All threads run in parallel with no visibility of each others actions,
-- All initially do no hold the lock
AllThreads = ||| t : ThreadID @ Thread(t)
-- Allow all threads to peform actions on the state variable
ActualSystem = (AllThreads [|InternalChannels|] Variables)
-- Rename lock acquisition and releasing and hide internal events
ActualSystemR = (ActualSystem 
                  [[get.I.1-t.T.t.False <- lockAcquired.L.0.T.t,
                    get.I.2.T.0.True <- lockAcquired.L.0.T.0,
                    get.I.2.T.1.False <- lockAcquired.L.0.T.1,
                    set.I.t.T.t.False <- lockReleased.L.0.T.t | t <- {0..NTHREADS-1}]])
ActualSystemRExtDiv = ActualSystemR \ InternalChannels

ActualSystemRNoDiv = (ActualSystemR [|{get.I.1.T.0.False, get.I.0.T.1.False, get.I.2.T.1.True, get.I.2.T.0.False}|] STOP) \ InternalChannels
assert ActualSystemRNoDiv :[divergence free]
--ActualSystemRNoDiv = ActualSystemR [|{getAndSet.t.True.True| t <- ThreadID}|] STOP

channel ended: ThreadID
StarveFree = callLock.L.0.T.0 -> lockAcquired.L.0.T.0 -> StarveFree
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0}|] StarveFree) \diff(LockEndEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0}|] StarveFree) \ diff(LockEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]
StarveFree2 = callLock.L.0.T.0 -> lockAcquired.L.0.T.0 -> StarveFree
              [] end.T.0 -> Out
Out = ended!T.0 -> Out
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0, end.T.0}|] StarveFree2) \diff(LockEndEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]

P(n, t) = [] a: LockChans @ a.L.0?s: diff(ThreadID, {t}) -> P(n+1, t)

P(n, t) = [] a: LockChans @ a.L.0?s: diff(ThreadID, {t}) -> P(n+1, t)

channel doorwayComplete: LockID.ThreadID
FCFSLockEvents = union(LockEvents, {|doorwayComplete|})
FCFSActualSystemR = ActualSystemR [[set.I.2.T.0.False <- doorwayComplete.L.0.T.0, 
                                    set.I.2.T.1.True <- doorwayComplete.L.0.T.1]]
FCFSActualSystemRExtDiv = FCFSActualSystemR \ InternalChannels

-- Works for 2 threads
FCFS({}, {}, TS)     = callLock.L.0?t -> FCFS({t}, {}, TS)
                       [] end?t:TS -> FCFS({}, {}, diff(TS, {t}))
FCFS({t}, {}, TS)    = callLock.L.0?t2:diff(TS, {t}) -> 
                            FCFS(union({t}, {t2}), {}, TS)
                       [] doorwayComplete.L.0.t -> FCFS({}, {t}, TS)
                       [] end?t2:diff(TS, {t}) -> FCFS({t}, {}, diff(TS,{t2}))
FCFS(ts, {}, TS)     = doorwayComplete.L.0?t:ts -> 
                         (doorwayComplete.L.0?t2:diff(ts, {t}) -> 
                            lockAcquired.L.0?t3:ts -> 
                              FCFS({}, diff(ts, {t3}), TS)
                          [] lockAcquired.L.0.t -> FCFS(diff(ts, {t}), {}, TS))
FCFS({}, {t}, TS)    = lockAcquired.L.0.t -> FCFS({}, {}, TS)
                       [] callLock.L.0?t2:diff(TS, {t}) -> 
                            (lockAcquired.L.0.t -> FCFS({t2}, {}, TS) 
                             [] doorwayComplete.L.0.t2 -> 
                                  lockAcquired.L.0.t -> FCFS({}, {t2}, TS))
                       [] end?t2:diff(TS, {t}) -> FCFS({}, {t}, diff(TS, {t2}))
FCFS({t1}, {t2}, TS) = lockAcquired.L.0.t2 -> FCFS({t1}, {}, TS)
                       [] doorwayComplete.L.0.t1 -> lockAcquired.L.0.t2 
                                                 -> FCFS({}, {t1}, TS) 

assert FCFS({}, {}, ThreadID) [T= FCFSActualSystemRExtDiv \ {|lockReleased|}

--B = buchi(StarvationFree(T.0), accept)
--StarvationFree(t) = accept -> StarvationFree(t)

--StarvationFreed(t) = 

channel wait
channel waitT: ThreadID
ActualSystemRB = (ActualSystemR
                  [[get.i.t.False <- wait,
                    get.i.t.True <- wait,
                    set.i.t.False <- wait,
                    set.i.t.True <- wait | t <- ThreadID, i <- Index]])

ActualSystemRBT = (ActualSystemR
                  [[get.i.t.False <- waitT.t,
                    get.i.t.True <- waitT.t,
                    set.i.t.False <- waitT.t,
                    set.i.t.True <- waitT.t | t <- ThreadID, i <- Index]])


assert ActualSystemRB :[divergence free]
assert ActualSystemRB \ {wait}:[divergence free]

assert ActualSystemRBT :[divergence free]
assert ActualSystemRBT \ {waitT.T.1}:[divergence free]
assert ActualSystemRBT \ {waitT.T.0}:[divergence free]