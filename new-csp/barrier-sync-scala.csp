n = 1
datatype ThreadID = T.{0..n-1}
--s = S.{0..n-1}
-- datatype ObjectID = S.{0..n-1} | O.{3}
-- subtype SignalID = S.{0..n-1}
datatype SignalID = S.{0..n-1}
datatype MonitorID = SigM.SignalID

include "signal-scala.csp"
--include "lock-support.csp"

-- Need a better way here


-- Channels to represent the completion of a barrier sync and a thread 
-- terminating
channel done: ThreadID
channel end: ThreadID


channel beginSync, endSync: ThreadID
channel sync
syncEvents = {|beginSync, sync, endSync|}
-- The implementation of the sync function
-- This currently uses external choice for thread termination; this is
-- somewhat artificial but means that we can restrict it to show that 
-- the barrier sync only deadlocks when at least one thread has 
-- terminated
-- TODO: Is there a nicer way of writing this than lots of If - Elses?
--       without a lot of repeated code
-- Thread(T.me) = ThreadIf1(T.me) [] end.T.me -> SKIP
-- ThreadIf1(T.me) = if (me*2+1 < n) then WaitForSignalUp(S.(me*2+1), T.me); 
--                                        ThreadIf2(T.me) 
--                   else ThreadIf2(T.me)
-- ThreadIf2(T.me) = if (me*2+2 < n) then WaitForSignalUp(S.(me*2+2), T.me); 
--                                        ThreadIf3(T.me) 
--                   else ThreadIf3(T.me)
-- ThreadIf3(T.me) = if me != 0 then SignalUpAndWait(S.me, T.me); 
--                                   ThreadIf4(T.me) 
--                   else ThreadIf4(T.me)
-- ThreadIf4(T.me) = if (me*2+1 < n) then SignalDown(S.(me*2+1), T.me); 
--                                        ThreadIf5(T.me) 
--                   else ThreadIf5(T.me)
-- ThreadIf5(T.me) = if (me*2+2 < n) then SignalDown(S.(me*2+2), T.me); 
--                                        done.T.me -> Thread(T.me) 
--                   else done.T.me -> Thread(T.me)

Thread(T.me) = beginSync.T.me -> Sync(T.me) |~| end.T.me -> SKIP
Sync(T.me) = 
  let child1 = 2*me+1 
      child2 = 2*me+2
  within 
      (if (child1 < n) then WaitForSignalUp(S.(child1), T.me) else SKIP);
      (if (child2 < n) then WaitForSignalUp(S.(child2), T.me) else SKIP);
      (if me != 0 then SignalUpAndWait(S.me, T.me) else SKIP);
      (if (child1 < n) then SignalDown(S.(child1), T.me) else SKIP);
      (if (child2 < n) then SignalDown(S.(child2), T.me) else SKIP);
      endSync.T.me -> Thread(T.me)


Threads = ||| t : ThreadID @ Thread(t)
BarrierSystem = InitialiseSignals(Threads) \ signalChannels

--NewBarrierSystem = NewInitialiseSignals(Threads)

-- Would only diverge if assertions fail
--assert BarrierSystem :[divergence free]

-- Should deadlock when any thread terminates via end
--assert not BarrierSystem :[deadlock free]


-- Only display the external method calls used by the barrier synchronisation
--BarrierSystemExt = (BarrierSystem) \ union(stateChannels, events)
--BarrierSystemSpurExt = (BarrierSpurSystem) \ union(stateChannels, MonitorsInst::events)
--assert BarrierSystemExt [|{|spuriousWakeup|}|] spuriousWakeup?_ ->  DIV :[divergence free]
--assert BarrierSystemSpurExt :[divergence free]--[|{|spuriousWakeup|}|] spuriousWakeup?_ -> spuriousWakeup?_ -> DIV 
--assert not BarrierSystemSpurExt \ {|spuriousWakeup|} :[divergence free]

-- Correctness check for synchronisation happening after all beginSyncs 
-- and before all endSyncs
Lineariser(t) = beginSync.t -> sync -> endSync.t -> Lineariser(t)
            |~| end.t -> STOP
Spec = (|| t <- ThreadID @ [{beginSync.t, sync, endSync.t, end.t}] Lineariser(t)) \ {sync}

--assert Spec [T= BarrierSystemExt \ signalChannels
assert BarrierSystem :[divergence free]
assert not BarrierSystem \ {|spuriousWakeup|} :[divergence free]
assert Spec [T= BarrierSystem \ {|spuriousWakeup|}
assert Spec [F= BarrierSystem \ {|spuriousWakeup|}
--assert Spec [FD= BarrierSystemExt \ signalChannels

-- Stable failures
--assert Spec [F= BarrierSystemSpurExt \ union(signalChannels, {|spuriousWakeup|})
--assert Spec [FD= BarrierSystemSpurExt \ union(signalChannels, {|spuriousWakeup|})


-- Correctness check that no sync can happen after a thread has terminated
Termination = end?_ -> sync -> DIV
--assert BarrierSystemExt:[divergence free]
--assert BarrierSystemExt [|union({|end|}, {sync})|] Termination :[divergence free]
-- Note that both of these are very slow for even moderate n
--assert BarrierSystemSpurExt:[divergence free]
--assert BarrierSystemSpurExt [|union({|end|}, {sync})|] Termination :[divergence free]

--SingleSpec = InitialiseSignals \ diff





-- sThread si the same as Thread but uses the spec Signal
sThread(T.me) = beginSync.T.me -> sSync(T.me) |~| end.T.me -> SKIP
sSync(T.me) = 
  let child1 = 2*me+1 
      child2 = 2*me+2
  within (if (child1 < n) then SpecWaitForSignalUp(S.(child1), T.me) else SKIP);
         (if (child2 < n) then SpecWaitForSignalUp(S.(child2), T.me) else SKIP);
         (if me != 0 then SpecSignalUpAndWait(S.me, T.me) else SKIP);
         (if (child1 < n) then SpecSignalDown(S.(child1), T.me) else SKIP);
         (if (child2 < n) then SpecSignalDown(S.(child2), T.me)else SKIP);
         endSync.T.me -> sThread(T.me)

-- Initialise the simple system
sThreads = ||| t : ThreadID @ sThread(t)     
sBarrierSystem = InitialiseSpecSignals(sThreads)

--Simplified signal is should be trace refined by the original system
--assert sBarrierSystem [T= BarrierSystemExt
--Spec trace refines it as expected
assert Spec [FD= sBarrierSystem \ signalChannels

