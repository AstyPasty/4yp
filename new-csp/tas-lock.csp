-- A lock based upon the test-and-set operation with fixed-time backoff.
--  * Based on Herlihy & Shavit, Section 7.4. 
--  * @param delay the time in nanoseconds to delay when conflict detected.

include "variable.csp"
include "lock-spec.csp"

NTHREADS = 5

datatype ThreadID = T.{0..NTHREADS-1}
datatype LockID = L.{0}

-- Used to count the number of 'failed' getAndSets
channel delay: ThreadID

-- state variable
channel get, set : ThreadID . Bool
channel getAndSet : ThreadID . Bool . Bool
State = AtomicVar(false, get, set, getAndSet)
InternalVarChannels = {|get, set, getAndSet|}
InternalChannels = {|get, set, getAndSet, delay|}


Lock :: (ThreadID) -> Proc
Lock(t) = getAndSet.t?v!True -> if v == False then SKIP --  while(state.getAndSet(true)){ }
           else Lock(t)--delay!t -> Lock(t)  -- getAndSet returned true so spin and retry

Unlock :: (ThreadID) -> Proc
Unlock(t) = set.t!False -> SKIP -- def unlock = state.set(false)

-- TODO: Needs updating with SKIPS; some form of returning whether lock held
-- TryLock :: (ThreadID) -> Proc
-- TryLock(t) = get.t?s ->                            -- def tryLock = !state.get
--               if s == True then lockNotObtained.L.0.t -> NotHolding(t) 
--               else getAndSet.t?v!True ->                 --               && !state.getAndSet(true)
--                 if v == False then Holding(t) 
--                 else lockNotObtained.L.0.t -> NotHolding(t)

Thread(t) = callLock.L.0.t -> Lock(t); Unlock(t); Thread(t)
            [] end.t -> SKIP --|~| end.t -> SKIP


-- All threads run in parallel with no visibility of each others actions,
-- All initially do not hold the lock
AllThreads = ||| t : ThreadID @ Thread(t)
-- Allow all threads to peform actions on the state variable
ActualSystem = (AllThreads [|InternalChannels|] State)
-- Rename lock acquisition and releasing and hide internal events
ActualSystemR = (ActualSystem 
                  [[getAndSet.t.False.True <- lockAcquired.L.0.t, 
                  set.t.False <- lockReleased.L.0.t | t <- ThreadID]])
ActualSystemRExtDiv = ActualSystemR \ InternalChannels

ActualSystemRNoDiv = (ActualSystemR [|{getAndSet.t.True.True| t <- ThreadID}|] STOP) \InternalChannels


-- Should pass as no 'internal' events
assert ActualSystem :[divergence free]
-- Expected to pass since a thread can repeat a getAndSet.t.True.True
assert not ActualSystemRExtDiv :[divergence free]
assert ActualSystemRNoDiv :[divergence free]
-- Passes with all threads immediately terminating
assert not ActualSystemR :[deadlock free]

-- Need to stop all ends occuring before any locking
threadRegulator(n) = if n > 1 then end?t -> threadRegulator(n-1) 
                     else STOP

ActualSystemNoTerminate = ActualSystemRNoDiv [|{|end|}|] 
                            threadRegulator(card(ThreadID)) 
assert ActualSystemNoTerminate :[deadlock free]                            
                  


-- Check that no two threads hold the lock at the same time
assert CheckMutualExclusion(L.0) [T= 
          ActualSystemRExtDiv \ OnlyRootObtain(L.0, ThreadID)

assert AcquireLock(L.0, {}, ThreadID) [F=
          ActualSystemRExtDiv \ AcquireLockChans(L.0, ThreadID)

-- Check no divergence before the lock is first held
CheckNoDiv = getAndSet?t!False.True -> STOP 
          [] get?t._ -> CheckNoDiv
assert (ActualSystem [|{|getAndSet, get|}|] CheckNoDiv) 
          \ {|get, getAndSet|} :[divergence free]



assert LockSpec2(L.0, {}, ThreadID) [T= ActualSystemRExtDiv

--assert ActualSystemR [T= LockSpec(L.0, {}, ThreadID)

channel ended: ThreadID
StarveFree = callLock.L.0.T.0 -> lockAcquired.L.0.T.0 -> StarveFree
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0}|] StarveFree) \diff(LockEndEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0}|] StarveFree) \ diff(LockEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]
StarveFree2 = callLock.L.0.T.0 -> lockAcquired.L.0.T.0 -> StarveFree
              |~| end.T.0 -> Out
Out = ended!T.0 -> Out
assert (ActualSystemRNoDiv [|{callLock.L.0.T.0, lockAcquired.L.0.T.0, end.T.0}|] StarveFree2) \diff(LockEndEvents, {callLock.L.0.T.0, lockAcquired.L.0.T.0}):[divergence free]



assert AcquireLock(L.0, {}, ThreadID) [F=
          ActualSystemRExtDiv \ AcquireLockChans(L.0, ThreadID)

-- assert AcquireLock2(L.0, {}) [F= 
--         ActualSystemRExtDiv \ union(AcquireLockChans(L.0, ThreadID), {|end|})

assert LiveUnlocked(L.0) [FD= 
          ActualSystemRExtDiv \ diff(LockEndEvents, {|lockAcquired.L.0, lockReleased.L.0|})

assert DIV [FD= 
          ActualSystemRExtDiv \ diff(LockEndEvents, {|lockAcquired.L.0, lockReleased.L.0|})    

P = lockAcquired.L.0?_ -> P1 |~| STOP --(lockReleased.L.0.T.0 |~| (P1 \ {|lockAcquired|}))
P1 =  P2 \ {|lockAcquired|}    

P2 = lockAcquired.L.0.T.0 -> lockAcquired.L.0.T.0 -> P2

assert P [FD= 
          ActualSystemRExtDiv \ diff(LockEndEvents, {|lockAcquired.L.0, lockReleased.L.0|})

channel a

assert a -> DIV [FD= a -> a -> DIV