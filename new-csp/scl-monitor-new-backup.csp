module SCLMonitor

-- Needs to be puts together in parallel for running and then analysis

include "lock-support.csp"

-- A map from ConditionID => (<ThreadID>, map(ThreadID => Bool))
-- First map gives the seq of waiters on each condition
-- Second map gives the ready values for each waiter

channel enqueue, dequeue, setReady: MonitorID.ConditionID.ThreadID.ThreadID
channel isReady: MonitorID.ConditionID.ThreadID.ThreadID.Bool
channel isEmpty: MonitorID.ConditionID.ThreadID

Waiting :: (MonitorID, ConditionID, <ThreadID>, {ThreadID}) -> Proc
Waiting(mon, cnd, <>, rs) = 
     isEmpty.mon.cnd?t -> Waiting(mon, cnd, <>, rs)
  [] enqueue.mon.cnd?t?t2 -> Waiting(mon, cnd, <t2>, rs)
  [] isReady.mon.cnd?t?t2!(member(t2, rs)) -> Waiting(mon, cnd, <>, rs)
  [] setReady.mon.cnd?t?t2:diff(ThreadID, rs) -> Waiting(mon, cnd, <>, union(rs, {t2}))
  [] wakeUp.mon.cnd?t:rs!false -> Waiting(mon, cnd, <>, diff(rs, {t}))

Waiting(mon, cnd, <t'>^ts, rs) =
     dequeue.mon.cnd?t!t' -> Waiting(mon, cnd, ts, rs)
  [] enqueue.mon.cnd?t?t2:diff(ThreadID, set(<t'>^ts)) -> Waiting(mon, cnd, <t'>^ts^<t2>, rs)
  [] isReady.mon.cnd?t?t2!(member(t2, rs)) -> Waiting(mon, cnd, <t'>^ts, rs)
  [] setReady.mon.cnd?t?t2:diff(ThreadID, rs) -> Waiting(mon, cnd, <t'>^ts, union(rs, {t2}))
  [] wakeUp.mon.cnd?t:rs!false -> Waiting(mon, cnd, <t'>^ts, diff(rs, {t}))


Signal1(mon, cnd, t) = signal.mon.cnd.t.t ->(
     isEmpty.mon.cnd.t -> SKIP
  [] dequeue.mon.cnd.t?t2 -> isReady.mon.cnd.t.t2?b ->
      if b then Signal1(mon, cnd, t)
      else setReady.mon.cnd.t.t2 -> unpark.mon.cnd.t.t2 -> wakeUp.mon.cnd.t2.true -> SKIP)

SignalAll1(mon, cnd, t) = signalAll.mon.cnd.t -> (
     isEmpty.mon.cnd.t -> SKIP
  [] dequeue.mon.cnd.t?t2 -> setReady.mon.cnd.t.t2 -> unpark.mon.cnd.t.t2 -> wakeUp.mon.cnd.t2.true -> SignalAll1(mon, cnd, t))

Await1(mon, cnd, t) = await.mon.cnd.t -> enqueue.mon.cnd.t.t ---> release.mon.cnd.t 
                                          -> Await2(mon, cnd, t)

Await2(mon, cnd, t) = isReady.mon.cnd.t.t?b -> if b then acquire.mon.cnd.t -> SKIP
                                             else park.mon.cnd.t -> wakeUp.mon.cnd.t?b2 -> Await2(mon, cnd, t)


Unlocked(mon, cnd, waiting) = 
     callAcquire.mon.cnd?t:diff(ThreadID, waiting) -> acquire.mon.cnd.t -> Locked(mon, cnd, waiting, t)
  [] wakeUp.mon.cnd?t':waiting!false -> Unlocked(mon, cnd, diff(waiting, {t'}))

Locked(mon, cnd, {}, t) = 
     callRelease.mon.cnd.t -> release.mon.cnd.t -> Unlocked(mon, cnd, {})
  -- this release below allows traces refinement, but breaks failures
  [] callAwait.mon.cnd.t -> await.mon.cnd.t -> release.mon.cnd.t -> Unlocked(mon, cnd, {t})
  [] callSignal.mon.cnd.t -> signal.mon.cnd.t.t -> isEmpty.mon.cnd.t -> Locked(mon, cnd, {}, t)
  [] callSignalAll.mon.cnd.t -> signalAll.mon.cnd.t -> Empty(mon, cnd, {}, t)

Locked(mon, cnd, waiting, t) = 
     callRelease.mon.cnd.t -> release.mon.cnd.t -> Unlocked(mon, cnd, waiting)
  [] callAwait.mon.cnd.t -> await.mon.cnd.t -> Unlocked(mon, cnd, {t})
  [] callSignal.mon.cnd.t -> signal.mon.cnd.t.t -> setReady.mon.cnd.t?t2:waiting -> Locked(mon, cnd, diff(waiting, {t2}), t)
  [] callSignalAll.mon.cnd.t -> signalAll.mon.cnd.t -> Empty(mon, cnd, waiting, t)
  [] wakeUp.mon.cnd?t':waiting!false -> Locked(mon, cnd, diff(waiting, {t'}), t)

Empty(mon, cnd, waiting, t) = if (waiting == {}) then Locked(mon, cnd, {}, t)
                              else wakeUp.mon.cnd?t':waiting!true -> Empty(mon, cnd, diff(waiting, {t'}), t)

exports

channel acquire, release: MonitorID.ConditionID.ThreadID
channel await, signalAll: MonitorID.ConditionID.ThreadID
channel signal: MonitorID.ConditionID.ThreadID.ThreadID
channel callAcquire, callRelease: MonitorID.ConditionID.ThreadID
channel callAwait, callSignalAll: MonitorID.ConditionID.ThreadID
channel callSignal: MonitorID.ConditionID.ThreadID

--InitialiseMon(mon, cnd) = (Unlocked(mon, cnd, {}) [|{|park.mon.cnd, unpark.mon.cnd, wakeUp.mon.cnd, enqueue.mon.cnd, dequeue.mon.cnd, setReady.mon.cnd, isReady.mon.cnd, isEmpty.mon.cnd|}|] (InitLockSupp(mon, cnd) ||| Waiting(mon, cnd, <>, {}))) 
InitialiseMon(mon, cnd) = ((Unlocked(mon, cnd, {}) [|{|enqueue.mon.cnd, dequeue.mon.cnd, setReady.mon.cnd, isReady.mon.cnd, isEmpty.mon.cnd|}|] Waiting(mon, cnd, <>, {})) [|{|park.mon.cnd, unpark.mon.cnd, wakeUp.mon.cnd|}|] InitLockSupp(mon, cnd))

runWith(P, mon, cnd) = (P [|{|callSignal.mon.cnd, callAwait.mon.cnd, callSignalAll.mon.cnd, callAcquire.mon.cnd, callRelease.mon.cnd|}|] InitialiseMon(mon, cnd)) \ {|park.mon.cnd, unpark.mon.cnd, wakeUp.mon.cnd, enqueue.mon.cnd, dequeue.mon.cnd, setReady.mon.cnd, isReady.mon.cnd, isEmpty.mon.cnd, await.mon.cnd, signal.mon.cnd, signalAll.mon.cnd, release.mon.cnd, acquire.mon.cnd|}
-- runWith(P, mon, cnd) = (P [|{|callSignal.mon.cnd, callAwait.mon.cnd, callSignalAll.mon.cnd, callAcquire.mon.cnd, callRelease.mon.cnd, enqueue.mon.cnd, dequeue.mon.cnd|}|] InitialiseMon(mon, cnd)) \ {|park.mon.cnd, unpark.mon.cnd, wakeUp.mon.cnd, enqueue.mon.cnd, dequeue.mon.cnd, setReady.mon.cnd, isReady.mon.cnd, isEmpty.mon.cnd, await.mon.cnd, signal.mon.cnd, signallAll.mon.cnd, release.mon.cnd, acquire.mon.cnd|}

-- Pre: hold the lock already
Await(mon, cnd, t) = callAwait.mon.cnd.t -> --checkHolder.mon.cnd?t2 -> if t2 != t then DIV else 
                        Await1(mon, cnd, t)

Signal(mon, cnd, t) = callSignal.mon.cnd.t -> --checkHolder.mon.cnd?t2 -> if t2 != t then DIV else 
                        Signal1(mon, cnd, t)

SignalAll(mon, cnd, t) = callSignalAll.mon.cnd.t -> --checkHolder.mon.cnd?t2 -> if t2 != t then DIV else 
                            SignalAll1(mon, cnd, t)

Lock(mon, cnd, t) = callAcquire.mon.cnd.t -> acquire.mon.cnd.t -> SKIP

Unlock(mon, cnd, t) = callRelease.mon.cnd.t -> release.mon.cnd.t -> SKIP

endmodule