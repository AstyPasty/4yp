@misc{AGift,
  author       = {Sara Baase},
  title        = {A Gift of Fire, 4th Edition},
  year         = {2012},
  url={https://www.philadelphia.edu.jo/academics/lalqoran/uploads/A-Gift-of-Fire-4thEd-2012.pdf}
}
@InProceedings{Amazon1,
  author          = {Chong et al.},
  journal         = {Software Engineering in Practice},
  title           = {Code-Level Model Checking in the Software Development Workflow},
  year            = {2020}
}
@misc{Amazon2,
  author          = {Daniel Schwartz-Narbonne},
  title           = {How to integrate formal proofs into software development},
  year            = {2020},
  url ={https://www.amazon.science/blog/how-to-integrate-formal-proofs-into-software-development}
}
@misc{BugSnag,
  author       = {Jamie Lynch},
  howpublished = {Blog},
  title        = {The Worst Computer Bugs in History: Race conditions in Therac-25},
  year         = {2017},
  url ={https://www.bugsnag.com/blog/bug-day-race-condition-therac-25/}
}
@misc{C4DT,
  author       = {Centre for Digital Trust},
  howpublished = {Newletter},
  title        = {Interview with Prof. Viktor Kunçak on Formal Software Verification and Stainless},
  year         = {2019},
  url = {https://mailchi.mp/6d0f3c2d3070/c4dt-newsletter-02?e=ec2376a2c8}
}
@misc{CADS,
  author       = {Nickau, Hanno and Lowe, Gavin},
  url = {https://www.cs.ox.ac.uk/teaching/courses/2023-2024/cads/},
  title        = {Concurrent Algorithms and Data Structures Lecture Notes},
  year         = {2023}
}
@misc{Concurrency,
  author = {Gavin Lowe, Bill Roscoe},
  url={https://www.cs.ox.ac.uk/teaching/materials19-20/concurrency/},
  title = {Concurrency Lecture Slides},
  year={2020}
}
@misc{CP,
  author = {Lowe, Gavin},
  url = {https://www.cs.ox.ac.uk/teaching/materials22-23/concurrentprogramming/},
  title = {Concurrent Programming Lecture Slides},
  year = {2022}
}
@InProceedings{Dafny,
author="Leino, K. Rustan M.",
editor="Clarke, Edmund M.
and Voronkov, Andrei",
title="Dafny: An Automatic Program Verifier for Functional Correctness",
booktitle="Logic for Programming, Artificial Intelligence, and Reasoning",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="348--370",
abstract="Traditionally, the full verification of a program's functional correctness has been obtained with pen and paper or with interactive proof assistants, whereas only reduced verification tasks, such as extended static checking, have enjoyed the automation offered by satisfiability-modulo-theories (SMT) solvers. More recently, powerful SMT solvers and well-designed program verifiers are starting to break that tradition, thus reducing the effort involved in doing full verification.",
isbn="978-3-642-17511-4"
}
@InProceedings{DeadlockAnalysis,
author="Buth, Bettina
and Kouvaras, Michel
and Peleska, Jan
and Shi, Hui",
editor="Johnson, Michael",
title="Deadlock analysis for a fault-tolerant system",
booktitle="Algebraic Methodology and Software Technology",
year="1997",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="60--74",
abstract="This article presents an approach for the verification of communication properties in large-scale real-world embedded systems by means of formal methods. It is illustrated by examples and results obtained during an industrial verification project performed for a fault-tolerant system designed and implemented by Daimler-Benz Aerospace for the International Space Station ISS. The approach is based on CSP specifications and the model-checking tool FDR. The task is split into manageable subtasks by applying an abstraction technique for restricting the specifications to the essential communication behaviour, modularization according to the process structure, and a set of generic theories developed for the application.",
isbn="978-3-540-69661-2"
}
@misc{Flight501Failure,
  author       = {Independent Inquiry Board},
  howpublished = {Report},
  title        = {ARIANE 5: Flight 501 Failure},
  year         = {1996},
  url ={http://sunnyday.mit.edu/nasa-class/Ariane5-report.html}
}
@misc{GitHub,
  author       = {Gavin Lowe},
  title        = {Scala Concurrency Library - lock.scala},
  year         = {2022},
  url = {https://github.com/GavinLowe1967/Scala-Concurrency-Library/blob/main/src/Lock/Lock.scala}
}
@inproceedings{GibsonFDR,
  title={FDR3 --- A Modern Refinement Checker for CSP},
  author={Thomas Gibson-Robinson, Philip Armstrong, Alexandre Boulgakov and A.W. Roscoe},
  booktitle={Tools and Algorithms for the Construction and Analysis of Systems},
  year = {2014},
  series={Lecture Notes in Computer Science},
  editor={Erika Ábrahám and Klaus Havelund}
}
@article{Jones,
  author          = {Cliff Jones},
  journal         = {ACM Transactions on Programming Languages and Systems},
  number          = {4},
  title           = {Tentative steps toward a development method for interfering programs},
  volume          = {5},
  year            = {1983}
}
@misc{KnightCapital,
  author       = {Henrico Dolfing},
  title        = {Case Study 4: The \$440 Million Software Error at Knight Capital},
  year         = {2019},
  url={https://www.henricodolfing.com/2019/06/project-failure-case-study-knight-capital.html}
}
@Inbook{Lawrence2005,
author="Lawrence, Jonathan",
editor="Abdallah, Ali E.
and Jones, Cliff B.
and Sanders, Jeff W.",
title="Practical Application of CSP and FDR to Software Design",
bookTitle="Communicating Sequential Processes. The First 25 Years: Symposium on the Occasion of 25 Years of CSP, London, UK, July 7-8, 2004. Revised Invited Papers",
year="2005",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="151--174",
abstract="Most published material on CSP and the FDR tool is theoretical and mathematically rigorous, which can be daunting to the less mathematical software engineer. It is also often difficult to relate the elegant but abstract examples in the literature to the problems of the software engineer who must eventually produce an executable program expressed in a procedural programming language This paper outlines a number of techniques which may be used to model procedural designs in CSP and to structure the refinements so as to render them tractable to verification by the FDR model-checking tool. A simple example, taken from a recent IBM Software Services engagement, is used to illustrate some of the ideas presented in the paper.",
isbn="978-3-540-32265-8",
doi="10.1007/11423348_9",
url="https://doi.org/10.1007/11423348_9"
}
@misc{LFQueue,
  author       = {Gavin Lowe},
  url={https://www.cs.ox.ac.uk/people/gavin.lowe/LockFreeQueue/lockFreeListAnalysis.pdf},
  title        = {Analysing Lock-Free Linearizable Datatypes using CSP},
  year         = {2017}
}
@misc{LockSupport,
  author       = {Oracle},
  howpublished = {Manuals},
  title        = {Class LockSupport},
  year         = {2017},
  url = {https://docs.oracle.com/javase%2F9%2Fdocs%2Fapi%2F%2F/java/util/concurrent/locks/LockSupport.html}
}
@article{LoweAlt,
  author          = {Lowe, Gavin},
  journal         = {Communicating Process Architectures 2011},
  title           = {Implementing Generalised Alt},
  year            = {2011}
}
@article{LoweDeadlock,
author = {Lowe, Gavin},
title = {Discovering and correcting a deadlock in a channel implementation},
journal = {Formal Aspects of Computing},
volume = {31},
issue = {4},
year = {2019},
url={https://doi.org/10.1007/s00165-019-00487-y}
}
@misc{LoweJVMMonitor,
  author       = {Gavin Lowe},
  howpublished = {GitHub},
  title        = {JVM Monitor Module},
  year         = {2023},
  url = {https://github.com/GavinLowe1967/SCL-CSP-analysis/blob/main/JVMMonitor.csp}
}
@article{LoweLin,
author = {Lowe, Gavin},
title = {Testing for linearizability},
journal = {Concurrency and Computation: Practice and Experience},
volume = {29},
number = {4},
pages = {e3928},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.3928},
year = {2017}
}
@article{LoweNeedham,
title = {An attack on the Needham-Schroeder public-key authentication protocol},
journal = {Information Processing Letters},
volume = {56},
number = {3},
pages = {131-133},
year = {1995},
issn = {0020-0190},
doi = {https://doi.org/10.1016/0020-0190(95)00144-2},
url = {https://www.sciencedirect.com/science/article/pii/0020019095001442},
author = {Gavin Lowe},
keywords = {Distributed systems, Security in digital systems, Authentication protocols, Public-key cryptography},
abstract = {In this paper we present an attack upon the Needham-Schroeder public-key authentication protocol. The attack allows an intruder to impersonate another agent.}
}
@misc{MicroTest,
  author       = {Laurie Williams, Gunnar Kudrjavets and Nachiappan Nagappan},
  title        = {On the Effectiveness of Unit Test Automation at Microsoft },
  url ={https://collaboration.csc.ncsu.edu/laurie/Papers/Unit_testing_cameraReady.pdf}
}
@article{MITTR,
  author          = {Rotman, David},
  journal         = {MIT Technology Review},
  number          = {2},
  title           = {The End of the Greatest Prediction on Earth},
  volume          = {123},
  year            = {2020}
}
@techreport{NASA1,
  author      = {John Bluck and Valerie Williamson},
  institution = {NASA},
  title       = {New NASA Software Detects 'Bugs' in Java Computer Code},
  year        = {2005},
  url ={https://web.archive.org/web/20100317110540/https://www.nasa.gov/centers/ames/news/releases/2005/05_28AR.html}
}
@misc{NASA2,
  author       = {Andrew Jones},
  url = {https://www.doc.ic.ac.uk/~wlj05/ajp/lecture6/slides/slides.pdf},
  title        = {An Introduction to NASA's Java Pathfinder},
  year         = {2010}
}
@article{Peterson,
  title={Myths About the Mutual Exclusion Problem},
  author={Gary L. Peterson},
  journal={Inf. Process. Lett.},
  year={1981},
  volume={12},
  pages={115-116},
  url={https://api.semanticscholar.org/CorpusID:45492619}
}
@book{PrinciplesOfModelChecking,
  author         = {Christel Baier and Joost-Pieter Katoen},
  publisher      = {MIT Press},
  title          = {Principles of Model Checking},
  year           = {2008}
}
@misc{RoscoeBuchi,
  author = {A. W. Roscoe and Thomas Gibson-Robinson},
  title = {The relationship between CSP, FDR and B{\"u}chi automata},
  year = {2016},
  url = {https://www.cs.ox.ac.uk/files/8301/infinitec.pdf}
}


@article{RoscoeSVA,
author = {David Hopkins and A. W. Roscoe},
year = {2007},
title = {SVA, a tool for analysing shared-variable programs},
url={https://www.cs.ox.ac.uk/bill.roscoe/publications/119.pdf}
}
@book{RoscoeUCS,
  author         = {Andrew (Bill) Roscoe},
  publisher      = {Springer},
  title          = {Understanding Concurrent Systems},
  year           = {2010}
}
@article{Schellhorn,
  author          = {Gerhard Schellhorn and Simon B{\"a}umler},
  journal         = {Ninth International Conference on Application of Concurrency to System Design},
  title           = {Formal Verification of Lock-Free Algorithms},
  year            = {2009}
}
@book{TAoMP, author = {Herlihy, Maurice and Shavit, Nir},
title = {The Art of Multiprocessor Programming, Revised Reprint},
year = {2012},
isbn = {9780123973375},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA},
edition = {1st}
}
@article{StateSpace,
author = {Musuvathi, Madanlal and Park, David Y. W. and Chou, Andy and Engler, Dawson R. and Dill, David L.},
title = {CMC: a pragmatic approach to model checking real code},
year = {2003},
issue_date = {Winter 2002},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {36},
number = {SI},
issn = {0163-5980},
url = {https://doi.org/10.1145/844128.844136},
doi = {10.1145/844128.844136},
abstract = {Many system errors do not emerge unless some intricate sequence of events occurs. In practice, this means that most systems have errors that only trigger after days or weeks of execution. Model checking [4] is an effective way to find such subtle errors. It takes a simplified description of the code and exhaustively tests it on all inputs, using techniques to explore vast state spaces efficiently. Unfortunately, while model checking systems code would be wonderful, it is almost never done in practice: building models is just too hard. It can take significantly more time to write a model than it did to write the code. Furthermore, by checking an abstraction of the code rather than the code itself, it is easy to miss errors.The paper's first contribution is a new model checker, CMC, which checks C and C++ implementations directly, eliminating the need for a separate abstract description of the system behavior. This has two major advantages: it reduces the effort to use model checking, and it reduces missed errors as well as time-wasting false error reports resulting from inconsistencies between the abstract description and the actual implementation. In addition, changes in the implementation can be checked immediately without updating a high-level description.The paper's second contribution is demonstrating that CMC works well on real code by applying it to three implementations of the Ad-hoc On-demand Distance Vector (AODV) networking protocol [7]. We found 34 distinct errors (roughly one bug per 328 lines of code), including a bug in the AODV specification itself. Given our experience building systems, it appears that the approach will work well in other contexts, and especially well for other networking protocols.},
journal = {SIGOPS Oper. Syst. Rev.},
month = {dec},
pages = {75-88},
numpages = {14}
}
@ARTICLE{SPIN,
  author={Holzmann, G.J.},
  journal={IEEE Transactions on Software Engineering}, 
  title={The model checker SPIN}, 
  year={1997},
  volume={23},
  number={5},
  pages={279-295},
  keywords={Software systems;Application software;Distributed algorithms;Control system synthesis;Algorithm design and analysis;Error correction codes;Telephony;Design methodology;Concurrent computing;Message passing},
  doi={10.1109/32.588521}}
@misc{CAFV,
  author       = {Dave Parker},
  title        = {Computer-Aided Formal Verification Lecture 9: LTL Model Checking},
  year         = {2022},
  url = {https://www.cs.ox.ac.uk/teaching/courses/2022-2023/computeraidedverification/index.html}
}
